{"version":3,"file":"backend.d.ts","sources":["backend.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { HttpBackend, HttpEvent, HttpRequest } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { HttpTestingController, RequestMatch } from './api';\nimport { TestRequest } from './request';\n/**\n * A testing backend for `HttpClient` which both acts as an `HttpBackend`\n * and as the `HttpTestingController`.\n *\n * `HttpClientTestingBackend` works by keeping a list of all open requests.\n * As requests come in, they're added to the list. Users can assert that specific\n * requests were made and then flush them. In the end, a verify() method asserts\n * that no unexpected requests were made.\n *\n *\n */\nexport declare class HttpClientTestingBackend implements HttpBackend, HttpTestingController {\n    /**\n     * List of pending requests which have not yet been expected.\n     */\n    private open;\n    /**\n     * Handle an incoming request by queueing it in the list of open requests.\n     */\n    handle(req: HttpRequest<any>): Observable<HttpEvent<any>>;\n    /**\n     * Helper function to search for requests in the list of open requests.\n     */\n    private _match;\n    /**\n     * Search for requests in the list of open requests, and return all that match\n     * without asserting anything about the number of matches.\n     */\n    match(match: string | RequestMatch | ((req: HttpRequest<any>) => boolean)): TestRequest[];\n    /**\n     * Expect that a single outstanding request matches the given matcher, and return\n     * it.\n     *\n     * Requests returned through this API will no longer be in the list of open requests,\n     * and thus will not match twice.\n     */\n    expectOne(match: string | RequestMatch | ((req: HttpRequest<any>) => boolean), description?: string): TestRequest;\n    /**\n     * Expect that no outstanding requests match the given matcher, and throw an error\n     * if any do.\n     */\n    expectNone(match: string | RequestMatch | ((req: HttpRequest<any>) => boolean), description?: string): void;\n    /**\n     * Validate that there are no outstanding requests.\n     */\n    verify(opts?: {\n        ignoreCancelled?: boolean;\n    }): void;\n    private descriptionFromMatcher;\n}\n"]}