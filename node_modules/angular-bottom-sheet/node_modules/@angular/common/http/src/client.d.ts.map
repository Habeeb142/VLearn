{"version":3,"file":"client.d.ts","sources":["client.d.ts"],"names":[],"mappingssourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Observable } from 'rxjs';\nimport { HttpHandler } from './backend';\nimport { HttpHeaders } from './headers';\nimport { HttpParams } from './params';\nimport { HttpRequest } from './request';\nimport { HttpEvent, HttpResponse } from './response';\nexport declare type HttpObserve = 'body' | 'events' | 'response';\n/**\n * Performs HTTP requests.\n *\n * `HttpClient` is available as an injectable class, with methods to perform HTTP requests.\n * Each request method has multiple signatures, and the return type varies based on\n * the signature that is called (mainly the values of `observe` and `responseType`).\n *\n *\n * @see [HTTP Guide](guide/http)\n *\n *\n * @usageNotes\n * Sample HTTP requests for the [Tour of Heroes](/tutorial/toh-pt0) application.\n *\n * ### HTTP Request Example\n *\n * ```\n *  // GET heroes whose name contains search term\n * searchHeroes(term: string): observable<Hero[]>{\n *\n *  const params = new HttpParams({fromString: 'name=term'});\n *    return this.httpClient.request('GET', this.heroesUrl, {responseType:'json', params});\n * }\n * ```\n * ### JSONP Example\n * ```\n * requestJsonp(url, callback = 'callback') {\n *  return this.httpClient.jsonp(this.heroesURL, callback);\n * }\n * ```\n *\n *\n * ### PATCH Example\n * ```\n * // PATCH one of the heroes' name\n * patchHero (id: number, heroName: string): Observable<{}> {\n * const url = `${this.heroesUrl}/${id}`;   // PATCH api/heroes/42\n *  return this.httpClient.patch(url, {name: heroName}, httpOptions)\n *    .pipe(catchError(this.handleError('patchHero')));\n * }\n* ```\n *\n * @publicApi\n */\nexport declare class HttpClient {\n    private handler;\n    constructor(handler: HttpHandler);\n    /**\n     * Sends an `HTTPRequest` and returns a stream of `HTTPEvents`.\n     *\n     * @return An `Observable` of the response, with the response body as a stream of `HTTPEvents`.\n     */\n    request<R>(req: HttpRequest<any>): Observable<HttpEvent<R>>;\n    /**\n     * Constructs a request that interprets the body as an `ArrayBuffer` and returns the response in an\n     * `ArrayBuffer`.\n     *\n     * @param method  The HTTP method.\n     * @param url     The endpoint URL.\n     * @param options The HTTP options to send with the request.\n     *\n     *\n     * @return An `Observable` of the response, with the response body as an `ArrayBuffer`.\n     */\n    request(method: string, url: string, options: {\n        body?: any;\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe?: 'body';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'arraybuffer';\n        withCredentials?: boolean;\n    }): Observable<ArrayBuffer>;\n    /**\n     * Constructs a request that interprets the body as a blob and returns\n     * the response as a blob.\n     *\n     * @param method  The HTTP method.\n     * @param url     The endpoint URL.\n     * @param options The HTTP options to send with the request.\n     *\n     * @return An `Observable` of the response, with the response body of type `Blob`.\n     */\n    request(method: string, url: string, options: {\n        body?: any;\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe?: 'body';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'blob';\n        withCredentials?: boolean;\n    }): Observable<Blob>;\n    /**\n     * Constructs a request that interprets the body as a text string and\n     * returns a string value.\n     *\n     * @param method  The HTTP method.\n     * @param url     The endpoint URL.\n     * @param options The HTTP options to send with the request.\n     *\n     * @return An `Observable` of the response, with the response body of type string.\n     */\n    request(method: string, url: string, options: {\n        body?: any;\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe?: 'body';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'text';\n        withCredentials?: boolean;\n    }): Observable<string>;\n    /**\n     * Constructs a request that interprets the body as an `ArrayBuffer` and returns the\n     * the full event stream.\n     *\n     * @param method  The HTTP method.\n     * @param url     The endpoint URL.\n     * @param options The HTTP options to send with the request.\n     *\n     * @return An `Observable` of the response, with the response body as an array of `HTTPEvents` for the\n     * request.\n     */\n    request(method: string, url: string, options: {\n        body?: any;\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        observe: 'events';\n        reportProgress?: boolean;\n        responseType: 'arraybuffer';\n        withCredentials?: boolean;\n    }): Observable<HttpEvent<ArrayBuffer>>;\n    /**\n     * Constructs a request that interprets the body as a `Blob` and returns\n     * the full event stream.\n     *\n     * @param method  The HTTP method.\n     * @param url     The endpoint URL.\n     * @param options The HTTP options to send with the request.\n     *\n     * @return An `Observable` of of all `HttpEvents` for the request,\n     * with the response body of type `Blob`.\n     */\n    request(method: string, url: string, options: {\n        body?: any;\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'events';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'blob';\n        withCredentials?: boolean;\n    }): Observable<HttpEvent<Blob>>;\n    /**\n     * Constructs a request which interprets the body as a text string and returns the full event stream.\n     *\n     * @param method  The HTTP method.\n     * @param url     The endpoint URL.\n     * @param options The HTTP options to send with the request.\n     *\n     * @return An `Observable` of all `HttpEvents` for the reques,\n     * with the response body of type string.\n     */\n    request(method: string, url: string, options: {\n        body?: any;\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'events';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'text';\n        withCredentials?: boolean;\n    }): Observable<HttpEvent<string>>;\n    /**\n     * Constructs a request which interprets the body as a JSON object and returns the full event stream.\n     *\n     * @param method  The HTTP method.\n     * @param url     The endpoint URL.\n     * @param options The HTTP options to send with the  request.\n     *\n     * @return An `Observable` of all `HttpEvents` for the request,\n     *  with the response body of type `Object`.\n     */\n    request(method: string, url: string, options: {\n        body?: any;\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        observe: 'events';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        responseType?: 'json';\n        withCredentials?: boolean;\n    }): Observable<HttpEvent<any>>;\n    /**\n     * Constructs a request which interprets the body as a JSON object and returns the full event stream.\n     *\n     * @param method  The HTTP method.\n     * @param url     The endpoint URL.\n     * @param options The HTTP options to send with the request.\n     *\n     * @return An `Observable` of all `HttpEvents` for the request,\n     * with the response body of type `R`.\n     */\n    request<R>(method: string, url: string, options: {\n        body?: any;\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        observe: 'events';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        responseType?: 'json';\n        withCredentials?: boolean;\n    }): Observable<HttpEvent<R>>;\n    /**\n     * Constructs a request which interprets the body as an `ArrayBuffer`\n     * and returns the full `HTTPResponse`.\n     *\n     * @param method  The HTTP method.\n     * @param url     The endpoint URL.\n     * @param options The HTTP options to send with the request.\n     *\n     * @return An `Observable` of the `HTTPResponse`, with the response body as an `ArrayBuffer`.\n     */\n    request(method: string, url: string, options: {\n        body?: any;\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'response';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'arraybuffer';\n        withCredentials?: boolean;\n    }): Observable<HttpResponse<ArrayBuffer>>;\n    /**\n     * Constructs a request which interprets the body as a `Blob` and returns the full `HTTPResponse`.\n     *\n     * @param method  The HTTP method.\n     * @param url     The endpoint URL.\n     * @param options The HTTP options to send with the request.\n     *\n     * @return An `Observable` of the `HTTPResponse`, with the response body of type `Blob`.\n     */\n    request(method: string, url: string, options: {\n        body?: any;\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'response';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'blob';\n        withCredentials?: boolean;\n    }): Observable<HttpResponse<Blob>>;\n    /**\n     * Constructs a request which interprets the body as a text stream and returns the full `HTTPResponse`.\n     *\n     * @param method  The HTTP method.\n     * @param url     The endpoint URL.\n     * @param options The HTTP options to send with the request.\n     *\n     * @return An `Observable` of the HTTP response, with the response body of type string.\n     */\n    request(method: string, url: string, options: {\n        body?: any;\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'response';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'text';\n        withCredentials?: boolean;\n    }): Observable<HttpResponse<string>>;\n    /**\n     * Constructs a request which interprets the body as a JSON object and returns the full `HTTPResponse`.\n     *\n     * @param method  The HTTP method.\n     * @param url     The endpoint URL.\n     * @param options The HTTP options to send with the request.\n     *\n     * @return An `Observable` of the full `HTTPResponse`,\n     * with the response body of type `Object`.\n     */\n    request(method: string, url: string, options: {\n        body?: any;\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        observe: 'response';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        responseType?: 'json';\n        withCredentials?: boolean;\n    }): Observable<HttpResponse<Object>>;\n    /**\n     * Constructs a request which interprets the body as a JSON object and returns\n     * the full `HTTPResponse` with the response body in the requested type.\n     *\n     * @param method  The HTTP method.\n     * @param url     The endpoint URL.\n     * @param options The HTTP options to send with the request.\n     *\n     * @return  An `Observable` of the full `HTTPResponse`, with the response body of type `R`.\n     */\n    request<R>(method: string, url: string, options: {\n        body?: any;\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        observe: 'response';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        responseType?: 'json';\n        withCredentials?: boolean;\n    }): Observable<HttpResponse<R>>;\n    /**\n     * Constructs a request which interprets the body as a JSON object and returns the full\n     * `HTTPResponse` as a JSON object.\n     *\n     * @param method  The HTTP method.\n     * @param url     The endpoint URL.\n     * @param options The HTTP options to send with the request.\n     *\n     * @return An `Observable` of the `HTTPResponse`, with the response body of type `Object`.\n     */\n    request(method: string, url: string, options?: {\n        body?: any;\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe?: 'body';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        responseType?: 'json';\n        reportProgress?: boolean;\n        withCredentials?: boolean;\n    }): Observable<Object>;\n    /**\n     * Constructs a request which interprets the body as a JSON object\n     * with the response body of the requested type.\n     *\n     * @param method  The HTTP method.\n     * @param url     The endpoint URL.\n     * @param options The HTTP options to send with the request.\n     *\n     * @return An `Observable` of the `HTTPResponse`, with the response body of type `R`.\n     */\n    request<R>(method: string, url: string, options?: {\n        body?: any;\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe?: 'body';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        responseType?: 'json';\n        reportProgress?: boolean;\n        withCredentials?: boolean;\n    }): Observable<R>;\n    /**\n     * Constructs a request where response type and requested observable are not known statically.\n     *\n     * @param method  The HTTP method.\n     * @param url     The endpoint URL.\n     * @param options The HTTP options to send with the request.\n     *\n     * @return An `Observable` of the reuested response, wuth body of type `any`.\n     */\n    request(method: string, url: string, options?: {\n        body?: any;\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        observe?: HttpObserve;\n        reportProgress?: boolean;\n        responseType?: 'arraybuffer' | 'blob' | 'json' | 'text';\n        withCredentials?: boolean;\n    }): Observable<any>;\n    /**\n     * Constructs a `DELETE` request that interprets the body as an `ArrayBuffer`\n     *  and returns the response as an `ArrayBuffer`.\n     *\n     * @param url     The endpoint URL.\n     * @param options The HTTP options to send with the request.\n     *\n     * @return  An `Observable` of the response body as an `ArrayBuffer`.\n     */\n    delete(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe?: 'body';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'arraybuffer';\n        withCredentials?: boolean;\n    }): Observable<ArrayBuffer>;\n    /**\n     * Constructs a `DELETE` request that interprets the body as a `Blob` and returns\n     * the response as a `Blob`.\n     *\n     * @param url     The endpoint URL.\n     * @param options The HTTP options to send with the request.\n     *\n     * @return An `Observable` of the response body as a `Blob`.\n     */\n    delete(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe?: 'body';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'blob';\n        withCredentials?: boolean;\n    }): Observable<Blob>;\n    /**\n     * Constructs a `DELETE` request that interprets the body as a text string and returns\n     * a string.\n     *\n     * @param url     The endpoint URL.\n     * @param options The HTTP options to send with the request.\n     *\n     * @return An `Observable` of the response, with the response body of type string.\n     */\n    delete(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe?: 'body';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'text';\n        withCredentials?: boolean;\n    }): Observable<string>;\n    /**\n     * Constructs a `DELETE` request that interprets the body as an `ArrayBuffer`\n     *  and returns the full event stream.\n     *\n     * @param url     The endpoint URL.\n     * @param options The HTTP options to send with the request.\n     *\n     * @return An `Observable` of all `HTTPEvents` for the request,\n     * with response body as an `ArrayBuffer`.\n     */\n    delete(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'events';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'arraybuffer';\n        withCredentials?: boolean;\n    }): Observable<HttpEvent<ArrayBuffer>>;\n    /**\n     * Constructs a `DELETE` request that interprets the body as a `Blob`\n     *  and returns the full event stream.\n     *\n     * @param url     The endpoint URL.\n     * @param options The HTTP options to send with the request.\n     *\n     * @return An `Observable` of all the `HTTPEvents` for the request, with the response body as a\n     * `Blob`.\n     */\n    delete(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'events';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'blob';\n        withCredentials?: boolean;\n    }): Observable<HttpEvent<Blob>>;\n    /**\n     * Constructs a `DELETE` request that interprets the body as a text string\n     * and returns the full event stream.\n     *\n     * @param url     The endpoint URL.\n     * @param options The HTTP options to send with the request.\n     *\n     * @return An `Observable` of all `HTTPEvents` for the request, with the response\n     *  body of type string.\n     */\n    delete(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'events';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'text';\n        withCredentials?: boolean;\n    }): Observable<HttpEvent<string>>;\n    /**\n     * Constructs a `DELETE` request that interprets the body as a JSON object\n     * and returns the full event stream.\n     *\n     * @param url     The endpoint URL.\n     * @param options The HTTP options to send with the request.\n     *\n     * @return An `Observable` of all `HTTPEvents` for the request, with response body of\n     * type `Object`.\n     */\n    delete(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'events';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType?: 'json';\n        withCredentials?: boolean;\n    }): Observable<HttpEvent<Object>>;\n    /**\n     * Constructs a `DELETE`request that interprets the body as a JSON object\n     * and returns the full event stream.\n     *\n     * @param url     The endpoint URL.\n     * @param options The HTTP options to send with the request.\n     *\n     * @return An `Observable` of all the `HTTPEvents` for the request, with a response\n     * body in the requested type.\n     */\n    delete<T>(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'events';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType?: 'json';\n        withCredentials?: boolean;\n    }): Observable<HttpEvent<T>>;\n    /**\n     * Constructs a `DELETE` request that interprets the body as an `ArrayBuffer` and returns\n     *  the full `HTTPResponse`.\n     *\n     * @param url     The endpoint URL.\n     * @param options The HTTP options to send with the request.\n     *\n     * @return An `Observable` of the full `HTTPResponse`, with the response body as an `ArrayBuffer`.\n     */\n    delete(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'response';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'arraybuffer';\n        withCredentials?: boolean;\n    }): Observable<HttpResponse<ArrayBuffer>>;\n    /**\n     * Constructs a `DELETE` request that interprets the body as a `Blob` and returns the full\n     * `HTTPResponse`.\n     *\n     * @param url     The endpoint URL.\n     * @param options The HTTP options to send with the request.\n     *\n     * @return An `Observable` of the `HTTPResponse`, with the response body of type `Blob`.\n     */\n    delete(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'response';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'blob';\n        withCredentials?: boolean;\n    }): Observable<HttpResponse<Blob>>;\n    /**\n     * Constructs a `DELETE` request that interprets the body as a text stream and\n     *  returns the full `HTTPResponse`.\n     *\n     * @param url     The endpoint URL.\n     * @param options The HTTP options to send with the request.\n     *\n     * @return An `Observable` of the full `HTTPResponse`, with the response body of type string.\n     */\n    delete(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'response';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'text';\n        withCredentials?: boolean;\n    }): Observable<HttpResponse<string>>;\n    /**\n     * Constructs a `DELETE` request the interprets the body as a JSON object and returns\n     * the full `HTTPResponse`.\n     *\n     * @param url     The endpoint URL.\n     * @param options The HTTP options to send with the request.\n     *\n     * @return An `Observable` of the `HTTPResponse`, with the response body of type `Object`.\n     *\n     */\n    delete(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'response';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType?: 'json';\n        withCredentials?: boolean;\n    }): Observable<HttpResponse<Object>>;\n    /**\n     * Constructs a `DELETE` request that interprets the body as a JSON object\n     * and returns the full `HTTPResponse`.\n     *\n     * @param url     The endpoint URL.\n     * @param options The HTTP options to send with the request.\n     *\n     * @return An `Observable` of the `HTTPResponse`, with the response body of the requested type.\n     */\n    delete<T>(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'response';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType?: 'json';\n        withCredentials?: boolean;\n    }): Observable<HttpResponse<T>>;\n    /**\n     * Constructs a `DELETE` request that interprets the body as a JSON object and\n     * returns the response body as a JSON object.\n     *\n     * @param url     The endpoint URL.\n     * @param options The HTTP options to send with the request.\n     *\n     * @return An `Observable` of the response, with the response body of type `Object`.\n     */\n    delete(url: string, options?: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe?: 'body';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType?: 'json';\n        withCredentials?: boolean;\n    }): Observable<Object>;\n    /**\n     * Constructs a DELETE request that interprets the body as a JSON object and returns\n     * the response in a given type.\n     *\n     * @param url     The endpoint URL.\n     * @param options The HTTP options to send with the request.\n     *\n     * @return An `Observable` of the `HTTPResponse`, with response body in the requested type.\n     */\n    delete<T>(url: string, options?: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe?: 'body';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType?: 'json';\n        withCredentials?: boolean;\n    }): Observable<T>;\n    /**\n     * Constructs a `GET` request that interprets the body as an `ArrayBuffer` and returns the response in\n     *  an `ArrayBuffer`.\n     *\n     * @param url     The endpoint URL.\n     * @param options The HTTP options to send with the request.\n     *\n     * @return An `Observable` of the response, with the response body as an `ArrayBuffer`.\n     */\n    get(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe?: 'body';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'arraybuffer';\n        withCredentials?: boolean;\n    }): Observable<ArrayBuffer>;\n    /**\n     * Constructs a `GET` request that interprets the body as a `Blob`\n     * and returns the response as a `Blob`.\n     *\n     * @param url     The endpoint URL.\n     * @param options The HTTP options to send with the request.\n     *\n     * @return An `Observable` of the response, with the response body as a `Blob`.\n     */\n    get(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe?: 'body';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'blob';\n        withCredentials?: boolean;\n    }): Observable<Blob>;\n    /**\n     * Constructs a `GET` request that interprets the body as a text string\n     * and returns the response as a string value.\n     *\n     * @param url     The endpoint URL.\n     * @param options The HTTP options to send with the request.\n     *\n     * @return An `Observable` of the response, with the response body of type string.\n     */\n    get(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe?: 'body';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'text';\n        withCredentials?: boolean;\n    }): Observable<string>;\n    /**\n     * Constructs a `GET` request that interprets the body as an `ArrayBuffer` and returns\n     *  the full event stream.\n     *\n     * @param url     The endpoint URL.\n     * @param options The HTTP options to send with the request.\n     *\n     * @return An `Observable` of all `HttpEvents` for the request, with the response\n     * body as an `ArrayBuffer`.\n     */\n    get(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'events';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'arraybuffer';\n        withCredentials?: boolean;\n    }): Observable<HttpEvent<ArrayBuffer>>;\n    /**\n     * Constructs a `GET` request that interprets the body as a `Blob` and\n     * returns the full event stream.\n     *\n     * @param url     The endpoint URL.\n     * @param options The HTTP options to send with the request.\n     *\n     * @return An `Observable` of the response, with the response body as a `Blob`.\n     */\n    get(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'events';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'blob';\n        withCredentials?: boolean;\n    }): Observable<HttpEvent<Blob>>;\n    /**\n     * Constructs a `GET` request that interprets the body as a text string and returns\n     * the full event stream.\n     *\n     * @param url     The endpoint URL.\n     * @param options The HTTP options to send with the request.\n     *\n     * @return An `Observable` of the response, with the response body of type string.\n     */\n    get(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'events';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'text';\n        withCredentials?: boolean;\n    }): Observable<HttpEvent<string>>;\n    /**\n     * Constructs a `GET` request that interprets the body as a JSON object\n     * and returns the full event stream.\n     *\n     * @param url     The endpoint URL.\n     * @param options The HTTP options to send with the request.\n     *\n     * @return An `Observable` of the response, with the response body of type `Object`.\n     */\n    get(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'events';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType?: 'json';\n        withCredentials?: boolean;\n    }): Observable<HttpEvent<Object>>;\n    /**\n     * Constructs a `GET` request that interprets the body as a JSON object and returns the full event stream.\n     *\n     * @param url     The endpoint URL.\n     * @param options The HTTP options to send with the request.\n     *\n     * @return An `Observable` of the response, with a response body in the requested type.\n     */\n    get<T>(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'events';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType?: 'json';\n        withCredentials?: boolean;\n    }): Observable<HttpEvent<T>>;\n    /**\n     * Constructs a `GET` request that interprets the body as an `ArrayBuffer` and\n     * returns the full `HTTPResponse`.\n     *\n     * @param url     The endpoint URL.\n     * @param options The HTTP options to send with the request.\n     *\n     * @return An `Observable` of the `HTTPResponse` for the request,\n     * with the response body as an `ArrayBuffer`.\n     */\n    get(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'response';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'arraybuffer';\n        withCredentials?: boolean;\n    }): Observable<HttpResponse<ArrayBuffer>>;\n    /**\n     * Constructs a `GET` request that interprets the body as a `Blob` and\n     * returns the full `HTTPResponse`.\n     *\n     * @param url     The endpoint URL.\n     * @param options The HTTP options to send with the request.\n     *\n     * @return An `Observable` of the `HTTPResponse` for the request,\n     *  with the response body as a `Blob`.\n     */\n    get(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'response';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'blob';\n        withCredentials?: boolean;\n    }): Observable<HttpResponse<Blob>>;\n    /**\n     * Constructs a `GET` request that interprets the body as a text stream and\n     * returns the full `HTTPResponse`.\n     *\n     * @param url     The endpoint URL.\n     * @param options The HTTP options to send with the request.\n     *\n     * @return An `Observable` of the `HTTPResponse` for the request,\n     * with the response body of type string.\n     */\n    get(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'response';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'text';\n        withCredentials?: boolean;\n    }): Observable<HttpResponse<string>>;\n    /**\n     * Constructs a `GET` request that interprets the body as a JSON object and\n     * returns the full `HTTPResponse`.\n     *\n     * @param url     The endpoint URL.\n     * @param options The HTTP options to send with the request.\n     *\n     * @return An `Observable` of the full `HttpResponse`,\n     * with the response body of type `Object`.\n     */\n    get(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'response';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType?: 'json';\n        withCredentials?: boolean;\n    }): Observable<HttpResponse<Object>>;\n    /**\n     * Constructs a `GET` request that interprets the body as a JSON object and\n     * returns the full `HTTPResponse`.\n     *\n     * @param url     The endpoint URL.\n     * @param options The HTTP options to send with the request.\n     *\n     * @return An `Observable` of the full `HTTPResponse` for the request,\n     * with a response body in the requested type.\n     */\n    get<T>(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'response';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType?: 'json';\n        withCredentials?: boolean;\n    }): Observable<HttpResponse<T>>;\n    /**\n     * Constructs a `GET` request that interprets the body as a JSON object and\n     * returns the response body as a JSON object.\n     *\n     * @param url     The endpoint URL.\n     * @param options The HTTP options to send with the request.\n     *\n     *\n     * @return An `Observable` of the response body as a JSON object.\n     */\n    get(url: string, options?: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe?: 'body';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType?: 'json';\n        withCredentials?: boolean;\n    }): Observable<Object>;\n    /**\n     * Constructs a `GET` request that interprets the body as a JSON object and returns\n     * the response body in a given type.\n     *\n     * @param url     The endpoint URL.\n     * @param options The HTTP options to send with the request.\n     *\n     * @return An `Observable` of the `HTTPResponse`, with a response body in the requested type.\n     */\n    get<T>(url: string, options?: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe?: 'body';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType?: 'json';\n        withCredentials?: boolean;\n    }): Observable<T>;\n    /**\n     * Constructs a `HEAD` request that interprets the body as an `ArrayBuffer` and\n     * returns the response as an `ArrayBuffer`.\n     *\n     * @param url     The endpoint URL.\n     * @param options The HTTP options to send with the request.\n     *\n     * @return An `Observable` of the response, with the response body as an `ArrayBuffer`.\n     */\n    head(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe?: 'body';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'arraybuffer';\n        withCredentials?: boolean;\n    }): Observable<ArrayBuffer>;\n    /**\n     * Constructs a `HEAD` request that interprets the body as a `Blob` and returns\n     * the response as a `Blob`.\n     *\n     * @param url     The endpoint URL.\n     * @param options The HTTP options to send with the request.\n     *\n     * @return  An `Observable` of the response, with the response body as a `Blob`.\n     */\n    head(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe?: 'body';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'blob';\n        withCredentials?: boolean;\n    }): Observable<Blob>;\n    /**\n     * Constructs a `HEAD` request that interprets the body as a text string and returns the response\n     * as a string value.\n     *\n     * @param url     The endpoint URL.\n     * @param options The HTTP options to send with the request.\n     *\n     * @return An `Observable` of the response, with the response body of type string.\n     */\n    head(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe?: 'body';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'text';\n        withCredentials?: boolean;\n    }): Observable<string>;\n    /**\n     * Constructs a `HEAD` request that interprets the body as an  `ArrayBuffer`\n     *  and returns the full event stream.\n     *\n     * @param url     The endpoint URL.\n     * @param options The HTTP options to send with the request.\n     *\n     * @return An `Observable` of tall `HttpEvents` for the request,\n     * with the response body as an `ArrayBuffer`.\n     */\n    head(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'events';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'arraybuffer';\n        withCredentials?: boolean;\n    }): Observable<HttpEvent<ArrayBuffer>>;\n    /**\n     * Constructs a `HEAD` request that interprets the body as a `Blob` and\n     * returns the full event stream.\n     *\n     * @param url     The endpoint URL.\n     * @param options The HTTP options to send with the request.\n     *\n     * @return An `Observable` of all `HttpEvents` for the request,\n     * with the response body as a `Blob`.\n     */\n    head(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'events';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'blob';\n        withCredentials?: boolean;\n    }): Observable<HttpEvent<Blob>>;\n    /**\n     * Constructs a `HEAD` request that interprets the body as a text string\n     * and returns the full event stream.\n     *\n     * @param url     The endpoint URL.\n     * @param options The HTTP options to send with the request.\n     *\n     * @return An `Observable` of all HttpEvents for the request, with the response body of type string.\n     */\n    head(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'events';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'text';\n        withCredentials?: boolean;\n    }): Observable<HttpEvent<string>>;\n    /**\n     * Constructs a `HEAD` request that interprets the body as a JSON object\n     * and returns the full HTTP event stream.\n     *\n     * @param url     The endpoint URL.\n     * @param options The HTTP options to send with the request.\n     *\n     * @return An `Observable` of all `HTTPEvents` for the request, with a response body of\n     * type `Object`.\n     */\n    head(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'events';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType?: 'json';\n        withCredentials?: boolean;\n    }): Observable<HttpEvent<Object>>;\n    /**\n     * Constructs a `HEAD` request that interprets the body as a JSON object and\n     * returns the full event stream.\n     *\n     * @return An `Observable` of all the `HTTPEvents` for the request\n     * , with a response body in the requested type.\n     *\n     * @param url     The endpoint URL.\n     * @param options The HTTP options to send with the request.\n     */\n    head<T>(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'events';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType?: 'json';\n        withCredentials?: boolean;\n    }): Observable<HttpEvent<T>>;\n    /**\n     * Constructs a `HEAD` request that interprets the body as an `ArrayBuffer`\n     *  and returns the full HTTP response.\n     *\n     * @param url     The endpoint URL.\n     * @param options The HTTP options to send with the request.\n     *\n     * @return An `Observable` of the `HTTPResponse` for the request,\n     * with the response body as an `ArrayBuffer`.\n     */\n    head(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'response';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'arraybuffer';\n        withCredentials?: boolean;\n    }): Observable<HttpResponse<ArrayBuffer>>;\n    /**\n     * Constructs a `HEAD` request that interprets the body as a `Blob` and returns\n     * the full `HTTPResponse`.\n     *\n     * @param url     The endpoint URL.\n     * @param options The HTTP options to send with the request.\n     *\n     * @return An `Observable` of the `HTTPResponse` for the request,\n     * with the response body as a blob.\n     */\n    head(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'response';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'blob';\n        withCredentials?: boolean;\n    }): Observable<HttpResponse<Blob>>;\n    /**\n     * Constructs a `HEAD` request that interprets the body as text stream\n     * and returns the full `HTTPResponse`.\n     *\n     * @param url     The endpoint URL.\n     * @param options The HTTP options to send with the request.\n     *\n     * @return An `Observable` of the `HTTPResponse` for the request,\n     * with the response body of type string.\n     */\n    head(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'response';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'text';\n        withCredentials?: boolean;\n    }): Observable<HttpResponse<string>>;\n    /**\n     * Constructs a `HEAD` request that interprets the body as a JSON object and\n     * returns the full `HTTPResponse`.\n     *\n     * @param url     The endpoint URL.\n     * @param options The HTTP options to send with the request.\n     *\n     * @return An `Observable` of the `HTTPResponse` for the request,\n     * with the response body of type `Object`.\n     */\n    head(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'response';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType?: 'json';\n        withCredentials?: boolean;\n    }): Observable<HttpResponse<Object>>;\n    /**\n     * Constructs a `HEAD` request that interprets the body as a JSON object\n     * and returns the full `HTTPResponse`.\n     *\n     * @param url     The endpoint URL.\n     * @param options The HTTP options to send with the request.\n     *\n     * @return An `Observable` of the `HTTPResponse` for the request,\n     * with a responmse body of the requested type.\n     */\n    head<T>(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'response';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType?: 'json';\n        withCredentials?: boolean;\n    }): Observable<HttpResponse<T>>;\n    /**\n     * Constructs a `HEAD` request that interprets the body as a JSON object and\n     * returns the response body as a JSON object.\n     *\n     * @param url     The endpoint URL.\n     * @param options The HTTP options to send with the request.\n     *\n     * @return An `Observable` of the response, with the response body as a JSON object.\n     */\n    head(url: string, options?: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe?: 'body';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType?: 'json';\n        withCredentials?: boolean;\n    }): Observable<Object>;\n    /**\n     * Constructs a `HEAD` request that interprets the body as a JSON object and returns\n     * the response in a given type.\n     *\n     * @param url     The endpoint URL.\n     * @param options The HTTP options to send with the request.\n     *\n     * @return An `Observable` of the `HTTPResponse` for the request,\n     * with a response body of the given type.\n     */\n    head<T>(url: string, options?: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe?: 'body';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType?: 'json';\n        withCredentials?: boolean;\n    }): Observable<T>;\n    /**\n     * Constructs a `JSONP` request for the given URL and name of the callback parameter.\n     *\n     * @param url The resource URL.\n     * @param callbackParam The callback function name.\n     *\n     * @return An `Observable` of the response object, with response body as an object.\n     */\n    jsonp(url: string, callbackParam: string): Observable<Object>;\n    /**\n     * Constructs a `JSONP` request for the given URL and name of the callback parameter.\n     *\n     * @param url The resource URL.\n     * @param callbackParam The callback function name.\n     *\n     * You must install a suitable interceptor, such as one provided by `HttpClientJsonpModule`.\n     * If no such interceptor is reached,\n     * then the `JSONP` request can be rejected by the configured backend.\n     *\n     * @return An `Observable` of the response object, with response body in the requested type.\n     */\n    jsonp<T>(url: string, callbackParam: string): Observable<T>;\n    /**\n     * Constructs an `OPTIONS` request that interprets the body as an\n     * `ArrayBuffer` and returns the response as an `ArrayBuffer`.\n     *\n     * @param url The endpoint URL.\n     * @param options HTTP options.\n     *\n     * @return An `Observable` of the response, with the response body as an `ArrayBuffer`.\n     */\n    options(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe?: 'body';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'arraybuffer';\n        withCredentials?: boolean;\n    }): Observable<ArrayBuffer>;\n    /**\n     * Constructs an `OPTIONS` request that interprets the body as a `Blob` and returns\n     * the response as a `Blob`.\n     *\n     * @param url The endpoint URL.\n     * @param options HTTP options.\n     *\n     * @return An `Observable` of the response, with the response body as a `Blob`.\n     */\n    options(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe?: 'body';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'blob';\n        withCredentials?: boolean;\n    }): Observable<Blob>;\n    /**\n     * Constructs an `OPTIONS` request that interprets the body as a text string and\n     * returns a string value.\n     *\n     * @param url The endpoint URL.\n     * @param options HTTP options.\n     *\n     * @return An `Observable` of the response, with the response body of type string.\n     */\n    options(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe?: 'body';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'text';\n        withCredentials?: boolean;\n    }): Observable<string>;\n    /**\n     * Constructs an `OPTIONS` request that interprets the body as an `ArrayBuffer`\n     *  and returns the full event stream.\n     *\n     * @param url The endpoint URL.\n     * @param options HTTP options.\n     *\n     * @return  An `Observable` of all `HttpEvents` for the request,\n     * with the response body as an `ArrayBuffer`.\n     */\n    options(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'events';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'arraybuffer';\n        withCredentials?: boolean;\n    }): Observable<HttpEvent<ArrayBuffer>>;\n    /**\n     * Constructs an `OPTIONS` request that interprets the body as a `Blob` and\n     * returns the full event stream.\n     *\n     * @param url The endpoint URL.\n     * @param options HTTP options.\n     *\n     * @return An `Observable` of all `HttpEvents` for the request,\n     * with the response body as a `Blob`.\n     */\n    options(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'events';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'blob';\n        withCredentials?: boolean;\n    }): Observable<HttpEvent<Blob>>;\n    /**\n     * Constructs an `OPTIONS` request that interprets the body as a text string\n     * and returns the full event stream.\n     *\n     * @param url The endpoint URL.\n     * @param options HTTP options.\n     *\n     * @return An `Observable` of all the `HTTPEvents` for the request,\n     * with the response body of type string.\n     */\n    options(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'events';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'text';\n        withCredentials?: boolean;\n    }): Observable<HttpEvent<string>>;\n    /**\n     * Constructs an `OPTIONS` request that interprets the body as a JSON object\n     * and returns the full event stream.\n     *\n     * @param url The endpoint URL.\n     * @param options HTTP options.\n     *\n     * @return An `Observable` of all the `HttpEvents` for the request with the response\n     * body of type `Object`.\n     */\n    options(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'events';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType?: 'json';\n        withCredentials?: boolean;\n    }): Observable<HttpEvent<Object>>;\n    /**\n     * Constructs an `OPTIONS` request that interprets the body as a JSON object and\n     * returns the full event stream.\n     *\n     * @param url The endpoint URL.\n     * @param options HTTP options.\n     *\n     * @return An `Observable` of all the `HttpEvents` for the request,\n     * with a response body in the requested type.\n     */\n    options<T>(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'events';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType?: 'json';\n        withCredentials?: boolean;\n    }): Observable<HttpEvent<T>>;\n    /**\n     * Constructs an `OPTIONS` request that interprets the body as an `ArrayBuffer`\n     *  and returns the full HTTP response.\n     *\n     * @param url The endpoint URL.\n     * @param options HTTP options.\n     *\n     * @return An `Observable` of the `HttpResponse` for the request,\n     * with the response body as an `ArrayBuffer`.\n     */\n    options(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'response';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'arraybuffer';\n        withCredentials?: boolean;\n    }): Observable<HttpResponse<ArrayBuffer>>;\n    /**\n     * Constructs an `OPTIONS` request that interprets the body as a `Blob`\n     *  and returns the full `HTTPResponse`.\n     *\n     * @param url The endpoint URL.\n     * @param options HTTP options.\n     *\n     * @return An `Observable` of the `HttpResponse` for the request,\n     *  with the response body as a `Blob`.\n     */\n    options(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'response';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'blob';\n        withCredentials?: boolean;\n    }): Observable<HttpResponse<Blob>>;\n    /**\n     * Constructs an `OPTIONS` request that interprets the body as text stream\n     * and returns the full `HTTPResponse`.\n     *\n     * @param url The endpoint URL.\n     * @param options HTTP options.\n     *\n     * @return An `Observable` of the `HttpResponse` for the request,\n     *  with the response body of type string.\n     */\n    options(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'response';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'text';\n        withCredentials?: boolean;\n    }): Observable<HttpResponse<string>>;\n    /**\n     * Constructs an `OPTIONS` request that interprets the body as a JSON object\n     * and returns the full `HTTPResponse`.\n     *\n     * @param url The endpoint URL.\n     * @param options HTTP options.\n     *\n     * @return An `Observable` of the `HttpResponse` for the request,\n     * with the response body of type `Object`.\n     */\n    options(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'response';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType?: 'json';\n        withCredentials?: boolean;\n    }): Observable<HttpResponse<Object>>;\n    /**\n     * Constructs an `OPTIONS` request that interprets the body as a JSON object and\n     * returns the full `HTTPResponse`.\n     *\n     * @param url The endpoint URL.\n     * @param options HTTP options.\n     *\n     * @return An `Observable` of the `HttpResponse` for the request,\n     * with a response body in the requested type.\n     */\n    options<T>(url: string, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'response';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType?: 'json';\n        withCredentials?: boolean;\n    }): Observable<HttpResponse<T>>;\n    /**\n     * Constructs an `OPTIONS` request that interprets the body as a JSON object and returns the response\n     * body as a JSON object.\n     *\n     * @param url The endpoint URL.\n     * @param options HTTP options.\n     *\n     * @return An `Observable` of the response, with the response body as a JSON object.\n     */\n    options(url: string, options?: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe?: 'body';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType?: 'json';\n        withCredentials?: boolean;\n    }): Observable<Object>;\n    /**\n     * Constructs an `OPTIONS` request that interprets the body as a JSON object and returns the response\n     * in a given type.\n     *\n     * @param url The endpoint URL.\n     * @param options HTTP options.\n     *\n     * @return An `Observable` of the `HTTPResponse`, with a response body of the given type.\n     */\n    options<T>(url: string, options?: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe?: 'body';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType?: 'json';\n        withCredentials?: boolean;\n    }): Observable<T>;\n    /**\n     * Constructs a `PATCH` request that interprets the body as an `ArrayBuffer` and returns\n     * the response as an `ArrayBuffer`.\n     *\n     * @param url The endpoint URL.\n     * @param body The resources to edit.\n     * @param options HTTP options.\n     *\n     * @return An `Observable` of the response, with the response body as an `ArrayBuffer`.\n     */\n    patch(url: string, body: any | null, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe?: 'body';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'arraybuffer';\n        withCredentials?: boolean;\n    }): Observable<ArrayBuffer>;\n    /**\n     * Constructs a `PATCH` request that interprets the body as a `Blob` and returns the response\n     * as a `Blob`.\n     *\n     * @param url The endpoint URL.\n     * @param body The resources to edit.\n     * @param options HTTP options.\n     *\n     * @return An `Observable` of the response, with the response body as a `Blob`.\n     */\n    patch(url: string, body: any | null, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe?: 'body';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'blob';\n        withCredentials?: boolean;\n    }): Observable<Blob>;\n    /**\n     * Constructs a `PATCH` request that interprets the body as as a text string and\n     * returns the response as a string value.\n     *\n     * @param url The endpoint URL.\n     * @param body The resources to edit.\n     * @param options HTTP options.\n     *\n     * @return An `Observable` of the response, with a response body of type string.\n     */\n    patch(url: string, body: any | null, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe?: 'body';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'text';\n        withCredentials?: boolean;\n    }): Observable<string>;\n    /**\n     * Constructs a `PATCH` request that interprets the body as an `ArrayBuffer` and\n     *  returns the the full event stream.\n     *\n     * @param url The endpoint URL.\n     * @param body The resources to edit.\n     * @param options HTTP options.\n     *\n     * @return An `Observable` of all the `HTTPevents` for the request,\n     * with the response body as an `ArrayBuffer`.\n     */\n    patch(url: string, body: any | null, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'events';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'arraybuffer';\n        withCredentials?: boolean;\n    }): Observable<HttpEvent<ArrayBuffer>>;\n    /**\n     * Constructs a `PATCH` request that interprets the body as a `Blob`\n     *  and returns the full event stream.\n     *\n     * @param url The endpoint URL.\n     * @param body The resources to edit.\n     * @param options HTTP options.\n     *\n     * @return An `Observable` of all the `HTTPevents` for the request, with the\n     * response body as `Blob`.\n     */\n    patch(url: string, body: any | null, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'events';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'blob';\n        withCredentials?: boolean;\n    }): Observable<HttpEvent<Blob>>;\n    /**\n     * Constructs a `PATCH` request that interprets the body as a text string and\n     * returns the full event stream.\n     *\n     * @param url The endpoint URL.\n     * @param body The resources to edit.\n     * @param options HTTP options.\n     *\n     * @return An `Observable` of all the `HTTPevents`for the request, with a\n     * response body of type string.\n     */\n    patch(url: string, body: any | null, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'events';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'text';\n        withCredentials?: boolean;\n    }): Observable<HttpEvent<string>>;\n    /**\n     * Constructs a `PATCH` request that interprets the body as a JSON object\n     * and returns the full event stream.\n     *\n     * @param url The endpoint URL.\n     * @param body The resources to edit.\n     * @param options HTTP options.\n     *\n     * @return An `Observable` of all the `HTTPevents` for the request,\n     * with a response body of type `Object`.\n     */\n    patch(url: string, body: any | null, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'events';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType?: 'json';\n        withCredentials?: boolean;\n    }): Observable<HttpEvent<Object>>;\n    /**\n     * Constructs a `PATCH` request that interprets the body as a JSON object\n     * and returns the full event stream.\n     *\n     * @param url The endpoint URL.\n     * @param body The resources to edit.\n     * @param options HTTP options.\n     *\n     * @return An `Observable` of all the `HTTPevents` for the request,\n     *  with a response body in the requested type.\n     */\n    patch<T>(url: string, body: any | null, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'events';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType?: 'json';\n        withCredentials?: boolean;\n    }): Observable<HttpEvent<T>>;\n    /**\n     * Constructs a `PATCH` request that interprets the body as an `ArrayBuffer`\n     *  and returns the full `HTTPResponse`.\n     *\n     * @param url The endpoint URL.\n     * @param body The resources to edit.\n     * @param options HTTP options.\n     *\n     * @return  An `Observable` of the `HttpResponse` for the request,\n     *  with the response body as an `ArrayBuffer`.\n     */\n    patch(url: string, body: any | null, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'response';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'arraybuffer';\n        withCredentials?: boolean;\n    }): Observable<HttpResponse<ArrayBuffer>>;\n    /**\n     * Constructs a `PATCH` request that interprets the body as a `Blob` and returns the full\n     * `HTTPResponse`.\n     *\n     * @param url The endpoint URL.\n     * @param body The resources to edit.\n     * @param options HTTP options.\n     *\n     * @return  An `Observable` of the `HttpResponse` for the request,\n     * with the response body as a `Blob`.\n     */\n    patch(url: string, body: any | null, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'response';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'blob';\n        withCredentials?: boolean;\n    }): Observable<HttpResponse<Blob>>;\n    /**\n     * Constructs a `PATCH` request that interprets the body as a text stream and returns the\n     * full `HTTPResponse`.\n     *\n     * @param url The endpoint URL.\n     * @param body The resources to edit.\n     * @param options HTTP options.\n     *\n     * @return  An `Observable` of the `HttpResponse` for the request,\n     * with a response body of type string.\n     */\n    patch(url: string, body: any | null, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'response';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'text';\n        withCredentials?: boolean;\n    }): Observable<HttpResponse<string>>;\n    /**\n     * Constructs a `PATCH` request that interprets the body as a JSON object\n     * and returns the full `HTTPResponse`.\n     *\n     * @param url The endpoint URL.\n     * @param body The resources to edit.\n     * @param options HTTP options.\n     *\n     * @return An `Observable` of the `HttpResponse` for the request,\n     * with a response body in the requested type.\n     */\n    patch(url: string, body: any | null, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'response';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType?: 'json';\n        withCredentials?: boolean;\n    }): Observable<HttpResponse<Object>>;\n    /**\n     * Constructs a `PATCH` request that interprets the body as a JSON object\n     * and returns the full `HTTPResponse`.\n     *\n     * @param url The endpoint URL.\n     * @param body The resources to edit.\n     * @param options HTTP options.\n     *\n     * @return An `Observable` of the `HttpResponse` for the request,\n     * with a response body in the given type.\n     */\n    patch<T>(url: string, body: any | null, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'response';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType?: 'json';\n        withCredentials?: boolean;\n    }): Observable<HttpResponse<T>>;\n    /**\n     * Constructs a `PATCH` request that interprets the body as a JSON object and\n     * returns the response body as a JSON object.\n     *\n     * @param url The endpoint URL.\n     * @param body The resources to edit.\n     * @param options HTTP options.\n     *\n     * @return An `Observable` of the response, with the response body as a JSON object.\n     */\n    patch(url: string, body: any | null, options?: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe?: 'body';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType?: 'json';\n        withCredentials?: boolean;\n    }): Observable<Object>;\n    /**\n     * Constructs a `PATCH` request that interprets the body as a JSON object\n     * and returns the response in a given type.\n     *\n     * @param url The endpoint URL.\n     * @param body The resources to edit.\n     * @param options HTTP options.\n     *\n     * @return  An `Observable` of the `HttpResponse` for the request,\n     * with a response body in the given type.\n     */\n    patch<T>(url: string, body: any | null, options?: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe?: 'body';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType?: 'json';\n        withCredentials?: boolean;\n    }): Observable<T>;\n    /**\n     * Constructs a `POST` request that interprets the body as an as an `ArrayBuffer` and returns\n     * an `ArrayBuffer`.\n     *\n     * @param url The endpoint URL.\n     * @param body The content to replace with.\n     * @param options HTTP options.\n     *\n     * @return An `Observable` of the response, with the response body as an `ArrayBuffer`.\n     */\n    post(url: string, body: any | null, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe?: 'body';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'arraybuffer';\n        withCredentials?: boolean;\n    }): Observable<ArrayBuffer>;\n    /**\n     * Constructs a `POST` request that interprets the body as a `Blob` and returns the\n     * response as a `Blob`.\n     *\n     * @param url The endpoint URL.\n     * @param body The content to replace with.\n     * @param options HTTP options\n     *\n     * @return An `Observable` of the response, with the response body as a `Blob`.\n     */\n    post(url: string, body: any | null, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe?: 'body';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'blob';\n        withCredentials?: boolean;\n    }): Observable<Blob>;\n    /**\n     * Constructs a `POST` request that interprets the body as a text string and\n     * returns the response as a string value.\n     *\n     * @param url The endpoint URL.\n     * @param body The content to replace with.\n     * @param options HTTP options\n     *\n     * @return An `Observable` of the response, with a response body of type string.\n     */\n    post(url: string, body: any | null, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe?: 'body';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'text';\n        withCredentials?: boolean;\n    }): Observable<string>;\n    /**\n     * Constructs a `POST` request that interprets the body as an `ArrayBuffer` and\n     * returns the full event stream.\n     *\n     * @param url The endpoint URL.\n     * @param body The content to replace with.\n     * @param options HTTP options\n     *\n     * @return An `Observable` of all `HttpEvents` for the request,\n     * with the response body as an `ArrayBuffer`.\n     */\n    post(url: string, body: any | null, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'events';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'arraybuffer';\n        withCredentials?: boolean;\n    }): Observable<HttpEvent<ArrayBuffer>>;\n    /**\n     * Constructs a `POST` request that interprets the body as a `Blob`\n     * and returns the response in an observable of the full event stream.\n     *\n     * @param url The endpoint URL.\n     * @param body The content to replace with.\n     * @param options HTTP options\n     *\n     * @return An `Observable` of all `HttpEvents` for the request, with the response body as `Blob`.\n     */\n    post(url: string, body: any | null, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'events';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'blob';\n        withCredentials?: boolean;\n    }): Observable<HttpEvent<Blob>>;\n    /**\n     * Constructs a `POST` request that interprets the body as a text string and returns the full event stream.\n     *\n     * @param url The endpoint URL.\n     * @param body The content to replace with.\n     * @param options HTTP options\n     *\n     * @return  An `Observable` of all `HttpEvents` for the request,\n     * with a response body of type string.\n     */\n    post(url: string, body: any | null, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'events';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'text';\n        withCredentials?: boolean;\n    }): Observable<HttpEvent<string>>;\n    /**\n     * Constructs a POST request that interprets the body as a JSON object and returns the full event stream.\n     *\n     * @param url The endpoint URL.\n     * @param body The content to replace with.\n     * @param options HTTP options\n     *\n     * @return  An `Observable` of all `HttpEvents` for the request,\n     * with a response body of type `Object`.\n     */\n    post(url: string, body: any | null, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'events';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType?: 'json';\n        withCredentials?: boolean;\n    }): Observable<HttpEvent<Object>>;\n    /**\n     * Constructs a POST request that interprets the body as a JSON object and returns the full event stream.\n     *\n     * @param url The endpoint URL.\n     * @param body The content to replace with.\n     * @param options HTTP options\n     *\n     * @return An `Observable` of all `HttpEvents` for the request,\n     * with a response body in the requested type.\n     */\n    post<T>(url: string, body: any | null, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'events';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType?: 'json';\n        withCredentials?: boolean;\n    }): Observable<HttpEvent<T>>;\n    /**\n     * Constructs a POST request that interprets the body as an `ArrayBuffer`\n     *  and returns the full `HTTPresponse`.\n     *\n     * @param url The endpoint URL.\n     * @param body The content to replace with.\n     * @param options HTTP options\n     *\n     * @return  An `Observable` of the `HTTPResponse` for the request, with the response body as an `ArrayBuffer`.\n     */\n    post(url: string, body: any | null, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'response';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'arraybuffer';\n        withCredentials?: boolean;\n    }): Observable<HttpResponse<ArrayBuffer>>;\n    /**\n     * Constructs a `POST` request that interprets the body as a `Blob` and returns the full\n     * `HTTPResponse`.\n     *\n     * @param url The endpoint URL.\n     * @param body The content to replace with.\n     * @param options HTTP options\n     *\n     * @return An `Observable` of the `HTTPResponse` for the request,\n     * with the response body as a `Blob`.\n     */\n    post(url: string, body: any | null, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'response';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'blob';\n        withCredentials?: boolean;\n    }): Observable<HttpResponse<Blob>>;\n    /**\n     * Constructs a `POST` request that interprets the body as a text stream and returns\n     * the full `HTTPResponse`.\n     *\n     * @param url The endpoint URL.\n     * @param body The content to replace with.\n     * @param options HTTP options\n     *\n     * @return  An `Observable` of the `HTTPResponse` for the request,\n     * with a response body of type string.\n     */\n    post(url: string, body: any | null, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'response';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'text';\n        withCredentials?: boolean;\n    }): Observable<HttpResponse<string>>;\n    /**\n     * Constructs a `POST` request that interprets the body as a JSON object\n     * and returns the full `HTTPResponse`.\n     *\n     * @param url The endpoint URL.\n     * @param body The content to replace with.\n     * @param options HTTP options\n     *\n     * @return An `Observable` of the `HTTPResponse` for the request, with a response body of type\n     * `Object`.\n     */\n    post(url: string, body: any | null, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'response';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType?: 'json';\n        withCredentials?: boolean;\n    }): Observable<HttpResponse<Object>>;\n    /**\n     * Constructs a `POST` request that interprets the body as a JSON object and returns the full\n     * `HTTPResponse`.\n     *\n     *\n     * @param url The endpoint URL.\n     * @param body The content to replace with.\n     * @param options HTTP options\n     *\n     * @return An `Observable` of the `HTTPResponse` for the request, with a response body in the requested type.\n     */\n    post<T>(url: string, body: any | null, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'response';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType?: 'json';\n        withCredentials?: boolean;\n    }): Observable<HttpResponse<T>>;\n    /**\n     * Constructs a `POST` request that interprets the body as a\n     * JSON object and returns the response body as a JSON object.\n     *\n     * @param url The endpoint URL.\n     * @param body The content to replace with.\n     * @param options HTTP options\n     *\n     * @return An `Observable` of the response, with the response body as a JSON object.\n     */\n    post(url: string, body: any | null, options?: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe?: 'body';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType?: 'json';\n        withCredentials?: boolean;\n    }): Observable<Object>;\n    /**\n     * Constructs a `POST` request that interprets the body as a JSON object\n     * and returns an observable of the response.\n     *\n     * @param url The endpoint URL.\n     * @param body The content to replace with.\n     * @param options HTTP options\n     *\n     * @return  An `Observable` of the `HTTPResponse` for the request, with a response body in the requested type.\n     */\n    post<T>(url: string, body: any | null, options?: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe?: 'body';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType?: 'json';\n        withCredentials?: boolean;\n    }): Observable<T>;\n    /**\n     * Constructs a `PUT` request that interprets the body as an `ArrayBuffer` and returns the\n     * response as an `ArrayBuffer`.\n     *\n     * @param url The endpoint URL.\n     * @param body The resources to add/update.\n     * @param options HTTP options\n     *\n     * @return An `Observable` of the response, with the response body as an `ArrayBuffer`.\n     */\n    put(url: string, body: any | null, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe?: 'body';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'arraybuffer';\n        withCredentials?: boolean;\n    }): Observable<ArrayBuffer>;\n    /**\n     * Constructs a `PUT` request that interprets the body as a `Blob` and returns\n     * the response as a `Blob`.\n     *\n     * @param url The endpoint URL.\n     * @param body The resources to add/update.\n     * @param options HTTP options\n     *\n     * @return An `Observable` of the response, with the response body as a `Blob`.\n     */\n    put(url: string, body: any | null, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe?: 'body';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'blob';\n        withCredentials?: boolean;\n    }): Observable<Blob>;\n    /**\n     * Constructs a `PUT` request that interprets the body as a text string and\n     * returns the response as a string value.\n     *\n     * @param url The endpoint URL.\n     * @param body The resources to add/update.\n     * @param options HTTP options\n     *\n     * @return An `Observable` of the response, with a response body of type string.\n     */\n    put(url: string, body: any | null, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe?: 'body';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'text';\n        withCredentials?: boolean;\n    }): Observable<string>;\n    /**\n     * Constructs a `PUT` request that interprets the body as an `ArrayBuffer` and\n     * returns the full event stream.\n     *\n     * @param url The endpoint URL.\n     * @param body The resources to add/update.\n     * @param options HTTP options\n     *\n     * @return An `Observable` of all `HttpEvents` for the request,\n     * with the response body as an `ArrayBuffer`.\n     */\n    put(url: string, body: any | null, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'events';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'arraybuffer';\n        withCredentials?: boolean;\n    }): Observable<HttpEvent<ArrayBuffer>>;\n    /**\n     * Constructs a `PUT` request that interprets the body as a `Blob` and returns the full event stream.\n     *\n     * @param url The endpoint URL.\n     * @param body The resources to add/update.\n     * @param options HTTP options\n     *\n     * @return An `Observable` of all `HttpEvents` for the request,\n     * with the response body as a `Blob`.\n     */\n    put(url: string, body: any | null, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'events';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'blob';\n        withCredentials?: boolean;\n    }): Observable<HttpEvent<Blob>>;\n    /**\n     * Constructs a `PUT` request that interprets the body as a text string and returns the full event stream.\n     *\n     * @param url The endpoint URL.\n     * @param body The resources to add/update.\n     * @param options HTTP options\n     *\n     * @return An `Observable` of all HttpEvents for the request, with a response body\n     * of type string.\n     */\n    put(url: string, body: any | null, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'events';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'text';\n        withCredentials?: boolean;\n    }): Observable<HttpEvent<string>>;\n    /**\n     * Constructs a `PUT` request that interprets the body as a JSON object and returns the full event stream.\n     *\n     * @param url The endpoint URL.\n     * @param body The resources to add/update.\n     * @param options HTTP options\n     *\n     * @return An `Observable` of all `HttpEvents` for the request, with a response body of\n     * type `Object`.\n     */\n    put(url: string, body: any | null, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'events';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType?: 'json';\n        withCredentials?: boolean;\n    }): Observable<HttpEvent<Object>>;\n    /**\n     * Constructs a `PUT` request that interprets the body as a JSON object and returns the\n     * full event stream.\n     *\n     * @param url The endpoint URL.\n     * @param body The resources to add/update.\n     * @param options HTTP options\n     *\n     * @return An `Observable` of all `HttpEvents` for the request,\n     * with a response body in the requested type.\n     */\n    put<T>(url: string, body: any | null, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'events';\n        responseType?: 'json';\n        withCredentials?: boolean;\n    }): Observable<HttpEvent<T>>;\n    /**\n     * Constructs a `PUT` request that interprets the body as an\n     * `ArrayBuffer` and returns an observable of the full HTTP response.\n     *\n     * @param url The endpoint URL.\n     * @param body The resources to add/update.\n     * @param options HTTP options\n     *\n     * @return An `Observable` of the `HTTPResponse` for the request, with the response body as an `ArrayBuffer`.\n     */\n    put(url: string, body: any | null, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'response';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'arraybuffer';\n        withCredentials?: boolean;\n    }): Observable<HttpResponse<ArrayBuffer>>;\n    /**\n     * Constructs a `PUT` request that interprets the body as a `Blob` and returns the\n     * full HTTP response.\n     *\n     * @param url The endpoint URL.\n     * @param body The resources to add/update.\n     * @param options HTTP options\n     *\n     * @return An `Observable` of the `HTTPResponse` for the request,\n     * with the response body as a `Blob`.\n     */\n    put(url: string, body: any | null, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'response';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'blob';\n        withCredentials?: boolean;\n    }): Observable<HttpResponse<Blob>>;\n    /**\n     * Constructs a `PUT` request that interprets the body as a text stream and returns the\n     * full HTTP response.\n     *\n     * @param url The endpoint URL.\n     * @param body The resources to add/update.\n     * @param options HTTP options\n     *\n     * @return An `Observable` of the `HTTPResponse` for the request, with a response body of type string.\n     */\n    put(url: string, body: any | null, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'response';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType: 'text';\n        withCredentials?: boolean;\n    }): Observable<HttpResponse<string>>;\n    /**\n     * Constructs a `PUT` request that interprets the body as a JSON object and returns the full HTTP response.\n     *\n     * @param url The endpoint URL.\n     * @param body The resources to add/update.\n     * @param options HTTP options\n     *\n     * @return An `Observable` of the `HTTPResponse` for the request, with a response body\n     * of type 'Object`.\n     */\n    put(url: string, body: any | null, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'response';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType?: 'json';\n        withCredentials?: boolean;\n    }): Observable<HttpResponse<Object>>;\n    /**\n     * Constructs a `PUT` request that interprets the body as a JSON object and returns the full HTTP response.\n     *\n     * @param url The endpoint URL.\n     * @param body The resources to add/update.\n     * @param options HTTP options\n     *\n     * @return An `Observable` of the `HTTPResponse` for the request,\n     * with a response body in the requested type.\n     */\n    put<T>(url: string, body: any | null, options: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe: 'response';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType?: 'json';\n        withCredentials?: boolean;\n    }): Observable<HttpResponse<T>>;\n    /**\n     * Constructs a `PUT` request that interprets the body as a JSON object and returns the response\n     * body as a JSON object.\n     *\n     * @param url The endpoint URL.\n     * @param body The resources to add/update.\n     * @param options HTTP options\n     *\n     * @return An `Observable` of the response, with the response body as a JSON object.\n     */\n    put(url: string, body: any | null, options?: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe?: 'body';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType?: 'json';\n        withCredentials?: boolean;\n    }): Observable<Object>;\n    /**\n     * Constructs a `PUT` request that interprets the body as a JSON object\n     * and returns an observable of the response.\n     *\n     * @param url The endpoint URL.\n     * @param body The resources to add/update.\n     * @param options HTTP options\n     *\n     * @return An `Observable` of the `HTTPResponse` for the request, with a response body in the requested type.\n     */\n    put<T>(url: string, body: any | null, options?: {\n        headers?: HttpHeaders | {\n            [header: string]: string | string[];\n        };\n        observe?: 'body';\n        params?: HttpParams | {\n            [param: string]: string | string[];\n        };\n        reportProgress?: boolean;\n        responseType?: 'json';\n        withCredentials?: boolean;\n    }): Observable<T>;\n}\n"]}