{"version":3,"file":"testing.js","sources":["../../../../../../packages/core/testing/src/async_fallback.ts","../../../../../../packages/core/testing/src/async.ts","../../../../../../packages/core/testing/src/component_fixture.ts","../../../../../../packages/core/testing/src/fake_async_fallback.ts","../../../../../../packages/core/testing/src/fake_async.ts","../../../../../../packages/core/testing/src/async_test_completer.ts","../../../../../../packages/core/testing/src/metadata_overrider.ts","../../../../../../packages/core/testing/src/resolvers.ts","../../../../../../packages/core/testing/src/test_bed_common.ts","../../../../../../packages/core/testing/src/r3_test_bed.ts","../../../../../../packages/core/testing/src/test_compiler.ts","../../../../../../packages/core/testing/src/test_bed.ts","../../../../../../packages/core/testing/src/before_each.ts","../../../../../../packages/core/testing/src/private_export_testing.ts","../../../../../../packages/core/testing/src/testing.ts","../../../../../../packages/core/testing/public_api.ts","../../../../../../packages/core/testing/index.ts","../../../../../../packages/core/testing/testing.ts"],"names":["_Zone","stringify","ReflectionCapabilities","tslib_1.__extends","resetCompiledComponents","getInjectableDef","ComponentFactory","NgModuleRef","compileNgModuleDefs","compileComponent","compileDirective","compilePipe","patchComponentDefWithScope","_nextRootElementId","clearOverrides","tslib_1.__values","overrideComponentView","APP_ROOT","overrideProvider","ivyEnabled","testBed","_global"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * async has been moved to zone.js\n * this file is for fallback in case old version of zone.js is used\n */\ndeclare var global: any;\n\nconst _global = <any>(typeof window === 'undefined' ? global : window);\n\n/**\n * Wraps a test function in an asynchronous test zone. The test will automatically\n * complete when all asynchronous calls within this zone are done. Can be used\n * to wrap an {@link inject} call.\n *\n * Example:\n *\n * ```\n * it('...', async(inject([AClass], (object) => {\n *   object.doSomething.then(() => {\n *     expect(...);\n *   })\n * });\n * ```\n *\n *\n */\nexport function asyncFallback(fn: Function): (done: any) => any {\n  // If we're running using the Jasmine test framework, adapt to call the 'done'\n  // function when asynchronous activity is finished.\n  if (_global.jasmine) {\n    // Not using an arrow function to preserve context passed from call site\n    return function(done: any) {\n      if (!done) {\n        // if we run beforeEach in @angular/core/testing/testing_internal then we get no done\n        // fake it here and assume sync.\n        done = function() {};\n        done.fail = function(e: any) { throw e; };\n      }\n      runInTestZone(fn, this, done, (err: any) => {\n        if (typeof err === 'string') {\n          return done.fail(new Error(<string>err));\n        } else {\n          done.fail(err);\n        }\n      });\n    };\n  }\n  // Otherwise, return a promise which will resolve when asynchronous activity\n  // is finished. This will be correctly consumed by the Mocha framework with\n  // it('...', async(myFn)); or can be used in a custom framework.\n  // Not using an arrow function to preserve context passed from call site\n  return function() {\n    return new Promise<void>((finishCallback, failCallback) => {\n      runInTestZone(fn, this, finishCallback, failCallback);\n    });\n  };\n}\n\nfunction runInTestZone(\n    fn: Function, context: any, finishCallback: Function, failCallback: Function) {\n  const currentZone = Zone.current;\n  const AsyncTestZoneSpec = (Zone as any)['AsyncTestZoneSpec'];\n  if (AsyncTestZoneSpec === undefined) {\n    throw new Error(\n        'AsyncTestZoneSpec is needed for the async() test helper but could not be found. ' +\n        'Please make sure that your environment includes zone.js/dist/async-test.js');\n  }\n  const ProxyZoneSpec = (Zone as any)['ProxyZoneSpec'] as {\n    get(): {setDelegate(spec: ZoneSpec): void; getDelegate(): ZoneSpec;};\n    assertPresent: () => void;\n  };\n  if (ProxyZoneSpec === undefined) {\n    throw new Error(\n        'ProxyZoneSpec is needed for the async() test helper but could not be found. ' +\n        'Please make sure that your environment includes zone.js/dist/proxy.js');\n  }\n  const proxyZoneSpec = ProxyZoneSpec.get();\n  ProxyZoneSpec.assertPresent();\n  // We need to create the AsyncTestZoneSpec outside the ProxyZone.\n  // If we do it in ProxyZone then we will get to infinite recursion.\n  const proxyZone = Zone.current.getZoneWith('ProxyZoneSpec');\n  const previousDelegate = proxyZoneSpec.getDelegate();\n  proxyZone.parent.run(() => {\n    const testZoneSpec: ZoneSpec = new AsyncTestZoneSpec(\n        () => {\n          // Need to restore the original zone.\n          currentZone.run(() => {\n            if (proxyZoneSpec.getDelegate() == testZoneSpec) {\n              // Only reset the zone spec if it's sill this one. Otherwise, assume it's OK.\n              proxyZoneSpec.setDelegate(previousDelegate);\n            }\n            finishCallback();\n          });\n        },\n        (error: any) => {\n          // Need to restore the original zone.\n          currentZone.run(() => {\n            if (proxyZoneSpec.getDelegate() == testZoneSpec) {\n              // Only reset the zone spec if it's sill this one. Otherwise, assume it's OK.\n              proxyZoneSpec.setDelegate(previousDelegate);\n            }\n            failCallback(error);\n          });\n        },\n        'test');\n    proxyZoneSpec.setDelegate(testZoneSpec);\n  });\n  return Zone.current.runGuarded(fn, context);\n}","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {asyncFallback} from './async_fallback';\n\n/**\n * Wraps a test function in an asynchronous test zone. The test will automatically\n * complete when all asynchronous calls within this zone are done. Can be used\n * to wrap an {@link inject} call.\n *\n * Example:\n *\n * ```\n * it('...', async(inject([AClass], (object) => {\n *   object.doSomething.then(() => {\n *     expect(...);\n *   })\n * });\n * ```\n *\n * @publicApi\n */\nexport function async(fn: Function): (done: any) => any {\n  const _Zone: any = typeof Zone !== 'undefined' ? Zone : null;\n  if (!_Zone) {\n    return function() {\n      return Promise.reject(\n          'Zone is needed for the async() test helper but could not be found. ' +\n          'Please make sure that your environment includes zone.js/dist/zone.js');\n    };\n  }\n  const asyncTest = _Zone && _Zone[_Zone.__symbol__('asyncTest')];\n  if (typeof asyncTest === 'function') {\n    return asyncTest(fn);\n  }\n  // not using new version of zone.js\n  // TODO @JiaLiPassion, remove this after all library updated to\n  // newest version of zone.js(0.8.25)\n  return asyncFallback(fn);\n}","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectorRef, ComponentRef, DebugElement, ElementRef, NgZone, RendererFactory2, getDebugNode} from '@angular/core';\n\n\n/**\n * Fixture for debugging and testing a component.\n *\n * @publicApi\n */\nexport class ComponentFixture<T> {\n  /**\n   * The DebugElement associated with the root element of this component.\n   */\n  debugElement: DebugElement;\n\n  /**\n   * The instance of the root component class.\n   */\n  componentInstance: T;\n\n  /**\n   * The native element at the root of the component.\n   */\n  nativeElement: any;\n\n  /**\n   * The ElementRef for the element at the root of the component.\n   */\n  elementRef: ElementRef;\n\n  /**\n   * The ChangeDetectorRef for the component\n   */\n  changeDetectorRef: ChangeDetectorRef;\n\n  private _renderer: RendererFactory2|null|undefined;\n  private _isStable: boolean = true;\n  private _isDestroyed: boolean = false;\n  private _resolve: ((result: any) => void)|null = null;\n  private _promise: Promise<any>|null = null;\n  private _onUnstableSubscription: any /** TODO #9100 */ = null;\n  private _onStableSubscription: any /** TODO #9100 */ = null;\n  private _onMicrotaskEmptySubscription: any /** TODO #9100 */ = null;\n  private _onErrorSubscription: any /** TODO #9100 */ = null;\n\n  constructor(\n      public componentRef: ComponentRef<T>, public ngZone: NgZone|null,\n      private _autoDetect: boolean) {\n    this.changeDetectorRef = componentRef.changeDetectorRef;\n    this.elementRef = componentRef.location;\n    this.debugElement = <DebugElement>getDebugNode(this.elementRef.nativeElement);\n    this.componentInstance = componentRef.instance;\n    this.nativeElement = this.elementRef.nativeElement;\n    this.componentRef = componentRef;\n    this.ngZone = ngZone;\n\n    if (ngZone) {\n      // Create subscriptions outside the NgZone so that the callbacks run oustide\n      // of NgZone.\n      ngZone.runOutsideAngular(() => {\n        this._onUnstableSubscription =\n            ngZone.onUnstable.subscribe({next: () => { this._isStable = false; }});\n        this._onMicrotaskEmptySubscription = ngZone.onMicrotaskEmpty.subscribe({\n          next: () => {\n            if (this._autoDetect) {\n              // Do a change detection run with checkNoChanges set to true to check\n              // there are no changes on the second run.\n              this.detectChanges(true);\n            }\n          }\n        });\n        this._onStableSubscription = ngZone.onStable.subscribe({\n          next: () => {\n            this._isStable = true;\n            // Check whether there is a pending whenStable() completer to resolve.\n            if (this._promise !== null) {\n              // If so check whether there are no pending macrotasks before resolving.\n              // Do this check in the next tick so that ngZone gets a chance to update the state of\n              // pending macrotasks.\n              scheduleMicroTask(() => {\n                if (!ngZone.hasPendingMacrotasks) {\n                  if (this._promise !== null) {\n                    this._resolve !(true);\n                    this._resolve = null;\n                    this._promise = null;\n                  }\n                }\n              });\n            }\n          }\n        });\n\n        this._onErrorSubscription =\n            ngZone.onError.subscribe({next: (error: any) => { throw error; }});\n      });\n    }\n  }\n\n  private _tick(checkNoChanges: boolean) {\n    this.changeDetectorRef.detectChanges();\n    if (checkNoChanges) {\n      this.checkNoChanges();\n    }\n  }\n\n  /**\n   * Trigger a change detection cycle for the component.\n   */\n  detectChanges(checkNoChanges: boolean = true): void {\n    if (this.ngZone != null) {\n      // Run the change detection inside the NgZone so that any async tasks as part of the change\n      // detection are captured by the zone and can be waited for in isStable.\n      this.ngZone.run(() => { this._tick(checkNoChanges); });\n    } else {\n      // Running without zone. Just do the change detection.\n      this._tick(checkNoChanges);\n    }\n  }\n\n  /**\n   * Do a change detection run to make sure there were no changes.\n   */\n  checkNoChanges(): void { this.changeDetectorRef.checkNoChanges(); }\n\n  /**\n   * Set whether the fixture should autodetect changes.\n   *\n   * Also runs detectChanges once so that any existing change is detected.\n   */\n  autoDetectChanges(autoDetect: boolean = true) {\n    if (this.ngZone == null) {\n      throw new Error('Cannot call autoDetectChanges when ComponentFixtureNoNgZone is set');\n    }\n    this._autoDetect = autoDetect;\n    this.detectChanges();\n  }\n\n  /**\n   * Return whether the fixture is currently stable or has async tasks that have not been completed\n   * yet.\n   */\n  isStable(): boolean { return this._isStable && !this.ngZone !.hasPendingMacrotasks; }\n\n  /**\n   * Get a promise that resolves when the fixture is stable.\n   *\n   * This can be used to resume testing after events have triggered asynchronous activity or\n   * asynchronous change detection.\n   */\n  whenStable(): Promise<any> {\n    if (this.isStable()) {\n      return Promise.resolve(false);\n    } else if (this._promise !== null) {\n      return this._promise;\n    } else {\n      this._promise = new Promise(res => { this._resolve = res; });\n      return this._promise;\n    }\n  }\n\n\n  private _getRenderer() {\n    if (this._renderer === undefined) {\n      this._renderer = this.componentRef.injector.get(RendererFactory2, null);\n    }\n    return this._renderer as RendererFactory2 | null;\n  }\n\n  /**\n    * Get a promise that resolves when the ui state is stable following animations.\n    */\n  whenRenderingDone(): Promise<any> {\n    const renderer = this._getRenderer();\n    if (renderer && renderer.whenRenderingDone) {\n      return renderer.whenRenderingDone();\n    }\n    return this.whenStable();\n  }\n\n  /**\n   * Trigger component destruction.\n   */\n  destroy(): void {\n    if (!this._isDestroyed) {\n      this.componentRef.destroy();\n      if (this._onUnstableSubscription != null) {\n        this._onUnstableSubscription.unsubscribe();\n        this._onUnstableSubscription = null;\n      }\n      if (this._onStableSubscription != null) {\n        this._onStableSubscription.unsubscribe();\n        this._onStableSubscription = null;\n      }\n      if (this._onMicrotaskEmptySubscription != null) {\n        this._onMicrotaskEmptySubscription.unsubscribe();\n        this._onMicrotaskEmptySubscription = null;\n      }\n      if (this._onErrorSubscription != null) {\n        this._onErrorSubscription.unsubscribe();\n        this._onErrorSubscription = null;\n      }\n      this._isDestroyed = true;\n    }\n  }\n}\n\nfunction scheduleMicroTask(fn: Function) {\n  Zone.current.scheduleMicroTask('scheduleMicrotask', fn);\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * fakeAsync has been moved to zone.js\n * this file is for fallback in case old version of zone.js is used\n */\nconst _Zone: any = typeof Zone !== 'undefined' ? Zone : null;\nconst FakeAsyncTestZoneSpec = _Zone && _Zone['FakeAsyncTestZoneSpec'];\ntype ProxyZoneSpec = {\n  setDelegate(delegateSpec: ZoneSpec): void; getDelegate(): ZoneSpec; resetDelegate(): void;\n};\nconst ProxyZoneSpec: {get(): ProxyZoneSpec; assertPresent: () => ProxyZoneSpec} =\n    _Zone && _Zone['ProxyZoneSpec'];\n\nlet _fakeAsyncTestZoneSpec: any = null;\n\n/**\n * Clears out the shared fake async zone for a test.\n * To be called in a global `beforeEach`.\n *\n * @publicApi\n */\nexport function resetFakeAsyncZoneFallback() {\n  _fakeAsyncTestZoneSpec = null;\n  // in node.js testing we may not have ProxyZoneSpec in which case there is nothing to reset.\n  ProxyZoneSpec && ProxyZoneSpec.assertPresent().resetDelegate();\n}\n\nlet _inFakeAsyncCall = false;\n\n/**\n * Wraps a function to be executed in the fakeAsync zone:\n * - microtasks are manually executed by calling `flushMicrotasks()`,\n * - timers are synchronous, `tick()` simulates the asynchronous passage of time.\n *\n * If there are any pending timers at the end of the function, an exception will be thrown.\n *\n * Can be used to wrap inject() calls.\n *\n * @usageNotes\n * ### Example\n *\n * {@example core/testing/ts/fake_async.ts region='basic'}\n *\n * @param fn\n * @returns The function wrapped to be executed in the fakeAsync zone\n *\n * @publicApi\n */\nexport function fakeAsyncFallback(fn: Function): (...args: any[]) => any {\n  // Not using an arrow function to preserve context passed from call site\n  return function(...args: any[]) {\n    const proxyZoneSpec = ProxyZoneSpec.assertPresent();\n    if (_inFakeAsyncCall) {\n      throw new Error('fakeAsync() calls can not be nested');\n    }\n    _inFakeAsyncCall = true;\n    try {\n      if (!_fakeAsyncTestZoneSpec) {\n        if (proxyZoneSpec.getDelegate() instanceof FakeAsyncTestZoneSpec) {\n          throw new Error('fakeAsync() calls can not be nested');\n        }\n\n        _fakeAsyncTestZoneSpec = new FakeAsyncTestZoneSpec();\n      }\n\n      let res: any;\n      const lastProxyZoneSpec = proxyZoneSpec.getDelegate();\n      proxyZoneSpec.setDelegate(_fakeAsyncTestZoneSpec);\n      try {\n        res = fn.apply(this, args);\n        flushMicrotasksFallback();\n      } finally {\n        proxyZoneSpec.setDelegate(lastProxyZoneSpec);\n      }\n\n      if (_fakeAsyncTestZoneSpec.pendingPeriodicTimers.length > 0) {\n        throw new Error(\n            `${_fakeAsyncTestZoneSpec.pendingPeriodicTimers.length} ` +\n            `periodic timer(s) still in the queue.`);\n      }\n\n      if (_fakeAsyncTestZoneSpec.pendingTimers.length > 0) {\n        throw new Error(\n            `${_fakeAsyncTestZoneSpec.pendingTimers.length} timer(s) still in the queue.`);\n      }\n      return res;\n    } finally {\n      _inFakeAsyncCall = false;\n      resetFakeAsyncZoneFallback();\n    }\n  };\n}\n\nfunction _getFakeAsyncZoneSpec(): any {\n  if (_fakeAsyncTestZoneSpec == null) {\n    throw new Error('The code should be running in the fakeAsync zone to call this function');\n  }\n  return _fakeAsyncTestZoneSpec;\n}\n\n/**\n * Simulates the asynchronous passage of time for the timers in the fakeAsync zone.\n *\n * The microtasks queue is drained at the very start of this function and after any timer callback\n * has been executed.\n *\n * @usageNotes\n * ### Example\n *\n * {@example core/testing/ts/fake_async.ts region='basic'}\n *\n * @publicApi\n */\nexport function tickFallback(millis: number = 0): void {\n  _getFakeAsyncZoneSpec().tick(millis);\n}\n\n/**\n * Simulates the asynchronous passage of time for the timers in the fakeAsync zone by\n * draining the macrotask queue until it is empty. The returned value is the milliseconds\n * of time that would have been elapsed.\n *\n * @param maxTurns\n * @returns The simulated time elapsed, in millis.\n *\n * @publicApi\n */\nexport function flushFallback(maxTurns?: number): number {\n  return _getFakeAsyncZoneSpec().flush(maxTurns);\n}\n\n/**\n * Discard all remaining periodic tasks.\n *\n * @publicApi\n */\nexport function discardPeriodicTasksFallback(): void {\n  const zoneSpec = _getFakeAsyncZoneSpec();\n  zoneSpec.pendingPeriodicTimers.length = 0;\n}\n\n/**\n * Flush any pending microtasks.\n *\n * @publicApi\n */\nexport function flushMicrotasksFallback(): void {\n  _getFakeAsyncZoneSpec().flushMicrotasks();\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {discardPeriodicTasksFallback, fakeAsyncFallback, flushFallback, flushMicrotasksFallback, resetFakeAsyncZoneFallback, tickFallback} from './fake_async_fallback';\n\nconst _Zone: any = typeof Zone !== 'undefined' ? Zone : null;\nconst fakeAsyncTestModule = _Zone && _Zone[_Zone.__symbol__('fakeAsyncTest')];\n\n/**\n * Clears out the shared fake async zone for a test.\n * To be called in a global `beforeEach`.\n *\n * @publicApi\n */\nexport function resetFakeAsyncZone(): void {\n  if (fakeAsyncTestModule) {\n    return fakeAsyncTestModule.resetFakeAsyncZone();\n  } else {\n    return resetFakeAsyncZoneFallback();\n  }\n}\n\n/**\n * Wraps a function to be executed in the fakeAsync zone:\n * - microtasks are manually executed by calling `flushMicrotasks()`,\n * - timers are synchronous, `tick()` simulates the asynchronous passage of time.\n *\n * If there are any pending timers at the end of the function, an exception will be thrown.\n *\n * Can be used to wrap inject() calls.\n *\n * @usageNotes\n * ### Example\n *\n * {@example core/testing/ts/fake_async.ts region='basic'}\n *\n * @param fn\n * @returns The function wrapped to be executed in the fakeAsync zone\n *\n * @publicApi\n */\nexport function fakeAsync(fn: Function): (...args: any[]) => any {\n  if (fakeAsyncTestModule) {\n    return fakeAsyncTestModule.fakeAsync(fn);\n  } else {\n    return fakeAsyncFallback(fn);\n  }\n}\n\n/**\n * Simulates the asynchronous passage of time for the timers in the fakeAsync zone.\n *\n * The microtasks queue is drained at the very start of this function and after any timer callback\n * has been executed.\n *\n * @usageNotes\n * ### Example\n *\n * {@example core/testing/ts/fake_async.ts region='basic'}\n *\n * @publicApi\n */\nexport function tick(millis: number = 0): void {\n  if (fakeAsyncTestModule) {\n    return fakeAsyncTestModule.tick(millis);\n  } else {\n    return tickFallback(millis);\n  }\n}\n\n/**\n * Simulates the asynchronous passage of time for the timers in the fakeAsync zone by\n * draining the macrotask queue until it is empty. The returned value is the milliseconds\n * of time that would have been elapsed.\n *\n * @param maxTurns\n * @returns The simulated time elapsed, in millis.\n *\n * @publicApi\n */\nexport function flush(maxTurns?: number): number {\n  if (fakeAsyncTestModule) {\n    return fakeAsyncTestModule.flush(maxTurns);\n  } else {\n    return flushFallback(maxTurns);\n  }\n}\n\n/**\n * Discard all remaining periodic tasks.\n *\n * @publicApi\n */\nexport function discardPeriodicTasks(): void {\n  if (fakeAsyncTestModule) {\n    return fakeAsyncTestModule.discardPeriodicTasks();\n  } else {\n    discardPeriodicTasksFallback();\n  }\n}\n\n/**\n * Flush any pending microtasks.\n *\n * @publicApi\n */\nexport function flushMicrotasks(): void {\n  if (fakeAsyncTestModule) {\n    return fakeAsyncTestModule.flushMicrotasks();\n  } else {\n    return flushMicrotasksFallback();\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Injectable completer that allows signaling completion of an asynchronous test. Used internally.\n */\nexport class AsyncTestCompleter {\n  // TODO(issue/24571): remove '!'.\n  private _resolve !: (result: any) => void;\n  // TODO(issue/24571): remove '!'.\n  private _reject !: (err: any) => void;\n  private _promise: Promise<any> = new Promise((res, rej) => {\n    this._resolve = res;\n    this._reject = rej;\n  });\n  done(value?: any) { this._resolve(value); }\n\n  fail(error?: any, stackTrace?: string) { this._reject(error); }\n\n  get promise(): Promise<any> { return this._promise; }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Éµstringify as stringify} from '@angular/core';\nimport {MetadataOverride} from './metadata_override';\n\ntype StringMap = {\n  [key: string]: any\n};\n\nlet _nextReferenceId = 0;\n\nexport class MetadataOverrider {\n  private _references = new Map<any, string>();\n  /**\n   * Creates a new instance for the given metadata class\n   * based on an old instance and overrides.\n   */\n  overrideMetadata<C extends T, T>(\n      metadataClass: {new (options: T): C;}, oldMetadata: C, override: MetadataOverride<T>): C {\n    const props: StringMap = {};\n    if (oldMetadata) {\n      _valueProps(oldMetadata).forEach((prop) => props[prop] = (<any>oldMetadata)[prop]);\n    }\n\n    if (override.set) {\n      if (override.remove || override.add) {\n        throw new Error(`Cannot set and add/remove ${stringify(metadataClass)} at the same time!`);\n      }\n      setMetadata(props, override.set);\n    }\n    if (override.remove) {\n      removeMetadata(props, override.remove, this._references);\n    }\n    if (override.add) {\n      addMetadata(props, override.add);\n    }\n    return new metadataClass(<any>props);\n  }\n}\n\nfunction removeMetadata(metadata: StringMap, remove: any, references: Map<any, string>) {\n  const removeObjects = new Set<string>();\n  for (const prop in remove) {\n    const removeValue = remove[prop];\n    if (removeValue instanceof Array) {\n      removeValue.forEach(\n          (value: any) => { removeObjects.add(_propHashKey(prop, value, references)); });\n    } else {\n      removeObjects.add(_propHashKey(prop, removeValue, references));\n    }\n  }\n\n  for (const prop in metadata) {\n    const propValue = metadata[prop];\n    if (propValue instanceof Array) {\n      metadata[prop] = propValue.filter(\n          (value: any) => !removeObjects.has(_propHashKey(prop, value, references)));\n    } else {\n      if (removeObjects.has(_propHashKey(prop, propValue, references))) {\n        metadata[prop] = undefined;\n      }\n    }\n  }\n}\n\nfunction addMetadata(metadata: StringMap, add: any) {\n  for (const prop in add) {\n    const addValue = add[prop];\n    const propValue = metadata[prop];\n    if (propValue != null && propValue instanceof Array) {\n      metadata[prop] = propValue.concat(addValue);\n    } else {\n      metadata[prop] = addValue;\n    }\n  }\n}\n\nfunction setMetadata(metadata: StringMap, set: any) {\n  for (const prop in set) {\n    metadata[prop] = set[prop];\n  }\n}\n\nfunction _propHashKey(propName: any, propValue: any, references: Map<any, string>): string {\n  const replacer = (key: any, value: any) => {\n    if (typeof value === 'function') {\n      value = _serializeReference(value, references);\n    }\n    return value;\n  };\n\n  return `${propName}:${JSON.stringify(propValue, replacer)}`;\n}\n\nfunction _serializeReference(ref: any, references: Map<any, string>): string {\n  let id = references.get(ref);\n  if (!id) {\n    id = `${stringify(ref)}${_nextReferenceId++}`;\n    references.set(ref, id);\n  }\n  return id;\n}\n\n\nfunction _valueProps(obj: any): string[] {\n  const props: string[] = [];\n  // regular public props\n  Object.keys(obj).forEach((prop) => {\n    if (!prop.startsWith('_')) {\n      props.push(prop);\n    }\n  });\n\n  // getters\n  let proto = obj;\n  while (proto = Object.getPrototypeOf(proto)) {\n    Object.keys(proto).forEach((protoProp) => {\n      const desc = Object.getOwnPropertyDescriptor(proto, protoProp);\n      if (!protoProp.startsWith('_') && desc && 'get' in desc) {\n        props.push(protoProp);\n      }\n    });\n  }\n  return props;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, Directive, NgModule, Pipe, Type, ÉµReflectionCapabilities as ReflectionCapabilities} from '@angular/core';\n\nimport {MetadataOverride} from './metadata_override';\nimport {MetadataOverrider} from './metadata_overrider';\n\nconst reflection = new ReflectionCapabilities();\n\n/**\n * Base interface to resolve `@Component`, `@Directive`, `@Pipe` and `@NgModule`.\n */\nexport interface Resolver<T> { resolve(type: Type<any>): T|null; }\n\n/**\n * Allows to override ivy metadata for tests (via the `TestBed`).\n */\nabstract class OverrideResolver<T> implements Resolver<T> {\n  private overrides = new Map<Type<any>, MetadataOverride<T>[]>();\n  private resolved = new Map<Type<any>, T|null>();\n\n  abstract get type(): any;\n\n  setOverrides(overrides: Array<[Type<any>, MetadataOverride<T>]>) {\n    this.overrides.clear();\n    overrides.forEach(([type, override]) => {\n      const overrides = this.overrides.get(type) || [];\n      overrides.push(override);\n      this.overrides.set(type, overrides);\n    });\n  }\n\n  getAnnotation(type: Type<any>): T|null {\n    return reflection.annotations(type).find(a => a instanceof this.type) || null;\n  }\n\n  resolve(type: Type<any>): T|null {\n    let resolved = this.resolved.get(type) || null;\n\n    if (!resolved) {\n      resolved = this.getAnnotation(type);\n      if (resolved) {\n        const overrides = this.overrides.get(type);\n        if (overrides) {\n          const overrider = new MetadataOverrider();\n          overrides.forEach(override => {\n            resolved = overrider.overrideMetadata(this.type, resolved !, override);\n          });\n        }\n      }\n      this.resolved.set(type, resolved);\n    }\n\n    return resolved;\n  }\n}\n\n\nexport class DirectiveResolver extends OverrideResolver<Directive> {\n  get type() { return Directive; }\n}\n\nexport class ComponentResolver extends OverrideResolver<Component> {\n  get type() { return Component; }\n}\n\nexport class PipeResolver extends OverrideResolver<Pipe> {\n  get type() { return Pipe; }\n}\n\nexport class NgModuleResolver extends OverrideResolver<NgModule> {\n  get type() { return NgModule; }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, Directive, InjectionToken, NgModule, Pipe, PlatformRef, SchemaMetadata, Type} from '@angular/core';\n\nimport {ComponentFixture} from './component_fixture';\nimport {MetadataOverride} from './metadata_override';\nimport {TestBed} from './test_bed';\n\n/**\n * An abstract class for inserting the root test component element in a platform independent way.\n *\n * @publicApi\n */\nexport class TestComponentRenderer {\n  insertRootElement(rootElementId: string) {}\n}\n\n/**\n * @publicApi\n */\nexport const ComponentFixtureAutoDetect =\n    new InjectionToken<boolean[]>('ComponentFixtureAutoDetect');\n\n/**\n * @publicApi\n */\nexport const ComponentFixtureNoNgZone = new InjectionToken<boolean[]>('ComponentFixtureNoNgZone');\n\n/**\n * @publicApi\n */\nexport type TestModuleMetadata = {\n  providers?: any[],\n  declarations?: any[],\n  imports?: any[],\n  schemas?: Array<SchemaMetadata|any[]>,\n  aotSummaries?: () => any[],\n};\n\n/**\n * Static methods implemented by the `TestBedViewEngine` and `TestBedRender3`\n *\n * @publicApi\n */\nexport interface TestBedStatic {\n  new (...args: any[]): TestBed;\n\n  initTestEnvironment(\n      ngModule: Type<any>|Type<any>[], platform: PlatformRef, aotSummaries?: () => any[]): TestBed;\n\n  /**\n   * Reset the providers for the test injector.\n   */\n  resetTestEnvironment(): void;\n\n  resetTestingModule(): TestBedStatic;\n\n  /**\n   * Allows overriding default compiler providers and settings\n   * which are defined in test_injector.js\n   */\n  configureCompiler(config: {providers?: any[]; useJit?: boolean;}): TestBedStatic;\n\n  /**\n   * Allows overriding default providers, directives, pipes, modules of the test injector,\n   * which are defined in test_injector.js\n   */\n  configureTestingModule(moduleDef: TestModuleMetadata): TestBedStatic;\n\n  /**\n   * Compile components with a `templateUrl` for the test's NgModule.\n   * It is necessary to call this function\n   * as fetching urls is asynchronous.\n   */\n  compileComponents(): Promise<any>;\n\n  overrideModule(ngModule: Type<any>, override: MetadataOverride<NgModule>): TestBedStatic;\n\n  overrideComponent(component: Type<any>, override: MetadataOverride<Component>): TestBedStatic;\n\n  overrideDirective(directive: Type<any>, override: MetadataOverride<Directive>): TestBedStatic;\n\n  overridePipe(pipe: Type<any>, override: MetadataOverride<Pipe>): TestBedStatic;\n\n  overrideTemplate(component: Type<any>, template: string): TestBedStatic;\n\n  /**\n   * Overrides the template of the given component, compiling the template\n   * in the context of the TestingModule.\n   *\n   * Note: This works for JIT and AOTed components as well.\n   */\n  overrideTemplateUsingTestingModule(component: Type<any>, template: string): TestBedStatic;\n\n  /**\n   * Overwrites all providers for the given token with the given provider definition.\n   *\n   * Note: This works for JIT and AOTed components as well.\n   */\n  overrideProvider(token: any, provider: {\n    useFactory: Function,\n    deps: any[],\n  }): TestBedStatic;\n  overrideProvider(token: any, provider: {useValue: any;}): TestBedStatic;\n  overrideProvider(token: any, provider: {\n    useFactory?: Function,\n    useValue?: any,\n    deps?: any[],\n  }): TestBedStatic;\n\n  /**\n   * Overwrites all providers for the given token with the given provider definition.\n   *\n   * @deprecated as it makes all NgModules lazy. Introduced only for migrating off of it.\n   */\n  deprecatedOverrideProvider(token: any, provider: {\n    useFactory: Function,\n    deps: any[],\n  }): void;\n  deprecatedOverrideProvider(token: any, provider: {useValue: any;}): void;\n  deprecatedOverrideProvider(token: any, provider: {\n    useFactory?: Function,\n    useValue?: any,\n    deps?: any[],\n  }): TestBedStatic;\n\n  get(token: any, notFoundValue?: any): any;\n\n  createComponent<T>(component: Type<T>): ComponentFixture<T>;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ApplicationInitStatus, Component, Directive, Injector, NgModule, NgZone, Pipe, PlatformRef, Provider, SchemaMetadata, Type, resolveForwardRef, ÉµInjectableDef as InjectableDef, ÉµNgModuleDef as NgModuleDef, ÉµNgModuleTransitiveScopes as NgModuleTransitiveScopes, ÉµNgModuleType as NgModuleType, ÉµRender3ComponentFactory as ComponentFactory, ÉµRender3NgModuleRef as NgModuleRef, ÉµcompileComponent as compileComponent, ÉµcompileDirective as compileDirective, ÉµcompileNgModuleDefs as compileNgModuleDefs, ÉµcompilePipe as compilePipe, ÉµgetInjectableDef as getInjectableDef, ÉµpatchComponentDefWithScope as patchComponentDefWithScope, ÉµresetCompiledComponents as resetCompiledComponents, Éµstringify as stringify} from '@angular/core';\n\nimport {ComponentFixture} from './component_fixture';\nimport {MetadataOverride} from './metadata_override';\nimport {ComponentResolver, DirectiveResolver, NgModuleResolver, PipeResolver, Resolver} from './resolvers';\nimport {TestBed} from './test_bed';\nimport {ComponentFixtureAutoDetect, ComponentFixtureNoNgZone, TestBedStatic, TestComponentRenderer, TestModuleMetadata} from './test_bed_common';\n\nlet _nextRootElementId = 0;\n\nconst EMPTY_ARRAY: Type<any>[] = [];\n\n// Resolvers for Angular decorators\ntype Resolvers = {\n  module: Resolver<NgModule>,\n  component: Resolver<Directive>,\n  directive: Resolver<Component>,\n  pipe: Resolver<Pipe>,\n};\n\n/**\n * @description\n * Configures and initializes environment for unit testing and provides methods for\n * creating components and services in unit tests.\n *\n * TestBed is the primary api for writing unit tests for Angular applications and libraries.\n *\n * Note: Use `TestBed` in tests. It will be set to either `TestBedViewEngine` or `TestBedRender3`\n * according to the compiler used.\n */\nexport class TestBedRender3 implements Injector, TestBed {\n  /**\n   * Initialize the environment for testing with a compiler factory, a PlatformRef, and an\n   * angular module. These are common to every test in the suite.\n   *\n   * This may only be called once, to set up the common providers for the current test\n   * suite on the current platform. If you absolutely need to change the providers,\n   * first use `resetTestEnvironment`.\n   *\n   * Test modules and platforms for individual platforms are available from\n   * '@angular/<platform_name>/testing'.\n   *\n   * @publicApi\n   */\n  static initTestEnvironment(\n      ngModule: Type<any>|Type<any>[], platform: PlatformRef, aotSummaries?: () => any[]): TestBed {\n    const testBed = _getTestBedRender3();\n    testBed.initTestEnvironment(ngModule, platform, aotSummaries);\n    return testBed;\n  }\n\n  /**\n   * Reset the providers for the test injector.\n   *\n   * @publicApi\n   */\n  static resetTestEnvironment(): void { _getTestBedRender3().resetTestEnvironment(); }\n\n  static configureCompiler(config: {providers?: any[]; useJit?: boolean;}): TestBedStatic {\n    _getTestBedRender3().configureCompiler(config);\n    return TestBedRender3 as any as TestBedStatic;\n  }\n\n  /**\n   * Allows overriding default providers, directives, pipes, modules of the test injector,\n   * which are defined in test_injector.js\n   */\n  static configureTestingModule(moduleDef: TestModuleMetadata): TestBedStatic {\n    _getTestBedRender3().configureTestingModule(moduleDef);\n    return TestBedRender3 as any as TestBedStatic;\n  }\n\n  /**\n   * Compile components with a `templateUrl` for the test's NgModule.\n   * It is necessary to call this function\n   * as fetching urls is asynchronous.\n   */\n  static compileComponents(): Promise<any> { return _getTestBedRender3().compileComponents(); }\n\n  static overrideModule(ngModule: Type<any>, override: MetadataOverride<NgModule>): TestBedStatic {\n    _getTestBedRender3().overrideModule(ngModule, override);\n    return TestBedRender3 as any as TestBedStatic;\n  }\n\n  static overrideComponent(component: Type<any>, override: MetadataOverride<Component>):\n      TestBedStatic {\n    _getTestBedRender3().overrideComponent(component, override);\n    return TestBedRender3 as any as TestBedStatic;\n  }\n\n  static overrideDirective(directive: Type<any>, override: MetadataOverride<Directive>):\n      TestBedStatic {\n    _getTestBedRender3().overrideDirective(directive, override);\n    return TestBedRender3 as any as TestBedStatic;\n  }\n\n  static overridePipe(pipe: Type<any>, override: MetadataOverride<Pipe>): TestBedStatic {\n    _getTestBedRender3().overridePipe(pipe, override);\n    return TestBedRender3 as any as TestBedStatic;\n  }\n\n  static overrideTemplate(component: Type<any>, template: string): TestBedStatic {\n    _getTestBedRender3().overrideComponent(component, {set: {template, templateUrl: null !}});\n    return TestBedRender3 as any as TestBedStatic;\n  }\n\n  /**\n   * Overrides the template of the given component, compiling the template\n   * in the context of the TestingModule.\n   *\n   * Note: This works for JIT and AOTed components as well.\n   */\n  static overrideTemplateUsingTestingModule(component: Type<any>, template: string): TestBedStatic {\n    _getTestBedRender3().overrideTemplateUsingTestingModule(component, template);\n    return TestBedRender3 as any as TestBedStatic;\n  }\n\n  overrideTemplateUsingTestingModule(component: Type<any>, template: string): void {\n    if (this._instantiated) {\n      throw new Error(\n          'Cannot override template when the test module has already been instantiated');\n    }\n    this._templateOverrides.set(component, template);\n  }\n\n  static overrideProvider(token: any, provider: {\n    useFactory: Function,\n    deps: any[],\n  }): TestBedStatic;\n  static overrideProvider(token: any, provider: {useValue: any;}): TestBedStatic;\n  static overrideProvider(token: any, provider: {\n    useFactory?: Function,\n    useValue?: any,\n    deps?: any[],\n  }): TestBedStatic {\n    _getTestBedRender3().overrideProvider(token, provider);\n    return TestBedRender3 as any as TestBedStatic;\n  }\n\n  /**\n   * Overwrites all providers for the given token with the given provider definition.\n   *\n   * @deprecated as it makes all NgModules lazy. Introduced only for migrating off of it.\n   */\n  static deprecatedOverrideProvider(token: any, provider: {\n    useFactory: Function,\n    deps: any[],\n  }): void;\n  static deprecatedOverrideProvider(token: any, provider: {useValue: any;}): void;\n  static deprecatedOverrideProvider(token: any, provider: {\n    useFactory?: Function,\n    useValue?: any,\n    deps?: any[],\n  }): TestBedStatic {\n    throw new Error('Render3TestBed.deprecatedOverrideProvider is not implemented');\n  }\n\n  static get(token: any, notFoundValue: any = Injector.THROW_IF_NOT_FOUND): any {\n    return _getTestBedRender3().get(token, notFoundValue);\n  }\n\n  static createComponent<T>(component: Type<T>): ComponentFixture<T> {\n    return _getTestBedRender3().createComponent(component);\n  }\n\n  static resetTestingModule(): TestBedStatic {\n    _getTestBedRender3().resetTestingModule();\n    return TestBedRender3 as any as TestBedStatic;\n  }\n\n  // Properties\n\n  platform: PlatformRef = null !;\n  ngModule: Type<any>|Type<any>[] = null !;\n\n  // metadata overrides\n  private _moduleOverrides: [Type<any>, MetadataOverride<NgModule>][] = [];\n  private _componentOverrides: [Type<any>, MetadataOverride<Component>][] = [];\n  private _directiveOverrides: [Type<any>, MetadataOverride<Directive>][] = [];\n  private _pipeOverrides: [Type<any>, MetadataOverride<Pipe>][] = [];\n  private _providerOverrides: Provider[] = [];\n  private _rootProviderOverrides: Provider[] = [];\n  private _providerOverridesByToken: Map<any, Provider[]> = new Map();\n  private _templateOverrides: Map<Type<any>, string> = new Map();\n\n  // test module configuration\n  private _providers: Provider[] = [];\n  private _declarations: Array<Type<any>|any[]|any> = [];\n  private _imports: Array<Type<any>|any[]|any> = [];\n  private _schemas: Array<SchemaMetadata|any[]> = [];\n\n  private _activeFixtures: ComponentFixture<any>[] = [];\n\n  private _moduleRef: NgModuleRef<any> = null !;\n  private _testModuleType: NgModuleType<any> = null !;\n\n  private _instantiated: boolean = false;\n\n  /**\n   * Initialize the environment for testing with a compiler factory, a PlatformRef, and an\n   * angular module. These are common to every test in the suite.\n   *\n   * This may only be called once, to set up the common providers for the current test\n   * suite on the current platform. If you absolutely need to change the providers,\n   * first use `resetTestEnvironment`.\n   *\n   * Test modules and platforms for individual platforms are available from\n   * '@angular/<platform_name>/testing'.\n   *\n   * @publicApi\n   */\n  initTestEnvironment(\n      ngModule: Type<any>|Type<any>[], platform: PlatformRef, aotSummaries?: () => any[]): void {\n    if (this.platform || this.ngModule) {\n      throw new Error('Cannot set base providers because it has already been called');\n    }\n    this.platform = platform;\n    this.ngModule = ngModule;\n  }\n\n  /**\n   * Reset the providers for the test injector.\n   *\n   * @publicApi\n   */\n  resetTestEnvironment(): void {\n    this.resetTestingModule();\n    this.platform = null !;\n    this.ngModule = null !;\n  }\n\n  resetTestingModule(): void {\n    resetCompiledComponents();\n    // reset metadata overrides\n    this._moduleOverrides = [];\n    this._componentOverrides = [];\n    this._directiveOverrides = [];\n    this._pipeOverrides = [];\n    this._providerOverrides = [];\n    this._rootProviderOverrides = [];\n    this._providerOverridesByToken.clear();\n    this._templateOverrides.clear();\n\n    // reset test module config\n    this._providers = [];\n    this._declarations = [];\n    this._imports = [];\n    this._schemas = [];\n    this._moduleRef = null !;\n    this._testModuleType = null !;\n\n    this._instantiated = false;\n    this._activeFixtures.forEach((fixture) => {\n      try {\n        fixture.destroy();\n      } catch (e) {\n        console.error('Error during cleanup of component', {\n          component: fixture.componentInstance,\n          stacktrace: e,\n        });\n      }\n    });\n    this._activeFixtures = [];\n  }\n\n  configureCompiler(config: {providers?: any[]; useJit?: boolean;}): void {\n    if (config.useJit != null) {\n      throw new Error('the Render3 compiler JiT mode is not configurable !');\n    }\n\n    if (config.providers) {\n      this._providerOverrides.push(...config.providers);\n    }\n  }\n\n  configureTestingModule(moduleDef: TestModuleMetadata): void {\n    this._assertNotInstantiated('R3TestBed.configureTestingModule', 'configure the test module');\n    if (moduleDef.providers) {\n      this._providers.push(...moduleDef.providers);\n    }\n    if (moduleDef.declarations) {\n      this._declarations.push(...moduleDef.declarations);\n    }\n    if (moduleDef.imports) {\n      this._imports.push(...moduleDef.imports);\n    }\n    if (moduleDef.schemas) {\n      this._schemas.push(...moduleDef.schemas);\n    }\n  }\n\n  compileComponents(): Promise<any> {\n    // assume for now that components don't use templateUrl / stylesUrl to unblock further testing\n    // TODO(pk): plug into the ivy's resource fetching pipeline\n    return Promise.resolve();\n  }\n\n  get(token: any, notFoundValue: any = Injector.THROW_IF_NOT_FOUND): any {\n    this._initIfNeeded();\n    if (token === TestBedRender3) {\n      return this;\n    }\n    return this._moduleRef.injector.get(token, notFoundValue);\n  }\n\n  execute(tokens: any[], fn: Function, context?: any): any {\n    this._initIfNeeded();\n    const params = tokens.map(t => this.get(t));\n    return fn.apply(context, params);\n  }\n\n  overrideModule(ngModule: Type<any>, override: MetadataOverride<NgModule>): void {\n    this._assertNotInstantiated('overrideModule', 'override module metadata');\n    this._moduleOverrides.push([ngModule, override]);\n  }\n\n  overrideComponent(component: Type<any>, override: MetadataOverride<Component>): void {\n    this._assertNotInstantiated('overrideComponent', 'override component metadata');\n    this._componentOverrides.push([component, override]);\n  }\n\n  overrideDirective(directive: Type<any>, override: MetadataOverride<Directive>): void {\n    this._assertNotInstantiated('overrideDirective', 'override directive metadata');\n    this._directiveOverrides.push([directive, override]);\n  }\n\n  overridePipe(pipe: Type<any>, override: MetadataOverride<Pipe>): void {\n    this._assertNotInstantiated('overridePipe', 'override pipe metadata');\n    this._pipeOverrides.push([pipe, override]);\n  }\n\n  /**\n   * Overwrites all providers for the given token with the given provider definition.\n   */\n  overrideProvider(token: any, provider: {useFactory?: Function, useValue?: any, deps?: any[]}):\n      void {\n    const providerDef = provider.useFactory ?\n        {provide: token, useFactory: provider.useFactory, deps: provider.deps || []} :\n        {provide: token, useValue: provider.useValue};\n\n    let injectableDef: InjectableDef<any>|null;\n    const isRoot =\n        (typeof token !== 'string' && (injectableDef = getInjectableDef(token)) &&\n         injectableDef.providedIn === 'root');\n    const overridesBucket = isRoot ? this._rootProviderOverrides : this._providerOverrides;\n    overridesBucket.push(providerDef);\n\n    // keep all overrides grouped by token as well for fast lookups using token\n    const overridesForToken = this._providerOverridesByToken.get(token) || [];\n    overridesForToken.push(providerDef);\n    this._providerOverridesByToken.set(token, overridesForToken);\n  }\n\n  /**\n   * Overwrites all providers for the given token with the given provider definition.\n   *\n   * @deprecated as it makes all NgModules lazy. Introduced only for migrating off of it.\n   */\n  deprecatedOverrideProvider(token: any, provider: {\n    useFactory: Function,\n    deps: any[],\n  }): void;\n  deprecatedOverrideProvider(token: any, provider: {useValue: any;}): void;\n  deprecatedOverrideProvider(\n      token: any, provider: {useFactory?: Function, useValue?: any, deps?: any[]}): void {\n    throw new Error('No implemented in IVY');\n  }\n\n  createComponent<T>(type: Type<T>): ComponentFixture<T> {\n    this._initIfNeeded();\n\n    const testComponentRenderer: TestComponentRenderer = this.get(TestComponentRenderer);\n    const rootElId = `root${_nextRootElementId++}`;\n    testComponentRenderer.insertRootElement(rootElId);\n\n    const componentDef = (type as any).ngComponentDef;\n\n    if (!componentDef) {\n      throw new Error(\n          `It looks like '${stringify(type)}' has not been IVY compiled - it has no 'ngComponentDef' field`);\n    }\n\n    const noNgZone: boolean = this.get(ComponentFixtureNoNgZone, false);\n    const autoDetect: boolean = this.get(ComponentFixtureAutoDetect, false);\n    const ngZone: NgZone = noNgZone ? null : this.get(NgZone, null);\n    const componentFactory = new ComponentFactory(componentDef);\n    const initComponent = () => {\n      const componentRef =\n          componentFactory.create(Injector.NULL, [], `#${rootElId}`, this._moduleRef);\n      return new ComponentFixture<any>(componentRef, ngZone, autoDetect);\n    };\n    const fixture = ngZone ? ngZone.run(initComponent) : initComponent();\n    this._activeFixtures.push(fixture);\n    return fixture;\n  }\n\n  // internal methods\n\n  private _initIfNeeded(): void {\n    if (this._instantiated) {\n      return;\n    }\n\n    const resolvers = this._getResolvers();\n    this._testModuleType = this._createTestModule();\n    this._compileNgModule(this._testModuleType, resolvers);\n\n    const parentInjector = this.platform.injector;\n    this._moduleRef = new NgModuleRef(this._testModuleType, parentInjector);\n\n    // ApplicationInitStatus.runInitializers() is marked @internal\n    // to core. Cast it to any before accessing it.\n    (this._moduleRef.injector.get(ApplicationInitStatus) as any).runInitializers();\n    this._instantiated = true;\n  }\n\n  // get overrides for a specific provider (if any)\n  private _getProviderOverrides(provider: any) {\n    const token = typeof provider === 'object' && provider.hasOwnProperty('provide') ?\n        provider.provide :\n        provider;\n    return this._providerOverridesByToken.get(token) || [];\n  }\n\n  // creates resolvers taking overrides into account\n  private _getResolvers() {\n    const module = new NgModuleResolver();\n    module.setOverrides(this._moduleOverrides);\n\n    const component = new ComponentResolver();\n    component.setOverrides(this._componentOverrides);\n\n    const directive = new DirectiveResolver();\n    directive.setOverrides(this._directiveOverrides);\n\n    const pipe = new PipeResolver();\n    pipe.setOverrides(this._pipeOverrides);\n\n    return {module, component, directive, pipe};\n  }\n\n  private _assertNotInstantiated(methodName: string, methodDescription: string) {\n    if (this._instantiated) {\n      throw new Error(\n          `Cannot ${methodDescription} when the test module has already been instantiated. ` +\n          `Make sure you are not using \\`inject\\` before \\`${methodName}\\`.`);\n    }\n  }\n\n  private _createTestModule(): NgModuleType {\n    const rootProviderOverrides = this._rootProviderOverrides;\n\n    @NgModule({\n      providers: [...rootProviderOverrides],\n      jit: true,\n    })\n    class RootScopeModule {\n    }\n\n    const ngZone = new NgZone({enableLongStackTrace: true});\n    const providers =\n        [{provide: NgZone, useValue: ngZone}, ...this._providers, ...this._providerOverrides];\n\n    const declarations = this._declarations;\n    const imports = [RootScopeModule, this.ngModule, this._imports];\n    const schemas = this._schemas;\n\n    @NgModule({providers, declarations, imports, schemas, jit: true})\n    class DynamicTestModule {\n    }\n\n    return DynamicTestModule as NgModuleType;\n  }\n\n  private _getMetaWithOverrides(meta: Component|Directive|NgModule, type?: Type<any>) {\n    const overrides: {providers?: any[], template?: string} = {};\n    if (meta.providers && meta.providers.length) {\n      const providerOverrides =\n          flatten(meta.providers, (provider: any) => this._getProviderOverrides(provider));\n      if (providerOverrides.length) {\n        overrides.providers = [...meta.providers, ...providerOverrides];\n      }\n    }\n    const hasTemplateOverride = !!type && this._templateOverrides.has(type);\n    if (hasTemplateOverride) {\n      overrides.template = this._templateOverrides.get(type !);\n    }\n    return Object.keys(overrides).length ? {...meta, ...overrides} : meta;\n  }\n\n  private _compileNgModule(moduleType: NgModuleType, resolvers: Resolvers): void {\n    const ngModule = resolvers.module.resolve(moduleType);\n\n    if (ngModule === null) {\n      throw new Error(`${stringify(moduleType)} has not @NgModule annotation`);\n    }\n\n    const metadata = this._getMetaWithOverrides(ngModule);\n    compileNgModuleDefs(moduleType, metadata);\n\n    const declarations: Type<any>[] =\n        flatten(ngModule.declarations || EMPTY_ARRAY, resolveForwardRef);\n    const compiledComponents: Type<any>[] = [];\n\n    // Compile the components, directives and pipes declared by this module\n    declarations.forEach(declaration => {\n      const component = resolvers.component.resolve(declaration);\n      if (component) {\n        const metadata = this._getMetaWithOverrides(component, declaration);\n        compileComponent(declaration, metadata);\n        compiledComponents.push(declaration);\n        return;\n      }\n\n      const directive = resolvers.directive.resolve(declaration);\n      if (directive) {\n        const metadata = this._getMetaWithOverrides(directive);\n        compileDirective(declaration, metadata);\n        return;\n      }\n\n      const pipe = resolvers.pipe.resolve(declaration);\n      if (pipe) {\n        compilePipe(declaration, pipe);\n        return;\n      }\n    });\n\n    // Compile transitive modules, components, directives and pipes\n    const transitiveScope = this._transitiveScopesFor(moduleType, resolvers);\n    compiledComponents.forEach(cmp => {\n      const scope = this._templateOverrides.has(cmp) ?\n          // if we have template override via `TestBed.overrideTemplateUsingTestingModule` -\n          // define Component scope as TestingModule scope, instead of the scope of NgModule\n          // where this Component was declared\n          this._transitiveScopesFor(this._testModuleType, resolvers) :\n          transitiveScope;\n      patchComponentDefWithScope((cmp as any).ngComponentDef, scope);\n    });\n  }\n\n  /**\n   * Compute the pair of transitive scopes (compilation scope and exported scope) for a given\n   * module.\n   *\n   * This operation is memoized and the result is cached on the module's definition. It can be\n   * called on modules with components that have not fully compiled yet, but the result should not\n   * be used until they have.\n   */\n  private _transitiveScopesFor<T>(moduleType: Type<T>, resolvers: Resolvers):\n      NgModuleTransitiveScopes {\n    if (!isNgModule(moduleType)) {\n      throw new Error(`${moduleType.name} does not have an ngModuleDef`);\n    }\n    const def = moduleType.ngModuleDef;\n\n    if (def.transitiveCompileScopes !== null) {\n      return def.transitiveCompileScopes;\n    }\n\n    const scopes: NgModuleTransitiveScopes = {\n      compilation: {\n        directives: new Set<any>(),\n        pipes: new Set<any>(),\n      },\n      exported: {\n        directives: new Set<any>(),\n        pipes: new Set<any>(),\n      },\n    };\n\n    def.declarations.forEach(declared => {\n      const declaredWithDefs = declared as Type<any>& { ngPipeDef?: any; };\n\n      if (declaredWithDefs.ngPipeDef !== undefined) {\n        scopes.compilation.pipes.add(declared);\n      } else {\n        scopes.compilation.directives.add(declared);\n      }\n    });\n\n    def.imports.forEach(<I>(imported: NgModuleType) => {\n      const ngModule = resolvers.module.resolve(imported);\n\n      if (ngModule === null) {\n        throw new Error(`Importing ${imported.name} which does not have an @ngModule`);\n      } else {\n        this._compileNgModule(imported, resolvers);\n      }\n\n      // When this module imports another, the imported module's exported directives and pipes are\n      // added to the compilation scope of this module.\n      const importedScope = this._transitiveScopesFor(imported, resolvers);\n      importedScope.exported.directives.forEach(entry => scopes.compilation.directives.add(entry));\n      importedScope.exported.pipes.forEach(entry => scopes.compilation.pipes.add(entry));\n    });\n\n    def.exports.forEach(<E>(exported: Type<E>) => {\n      const exportedTyped = exported as Type<E>& {\n        // Components, Directives, NgModules, and Pipes can all be exported.\n        ngComponentDef?: any;\n        ngDirectiveDef?: any;\n        ngModuleDef?: NgModuleDef<E>;\n        ngPipeDef?: any;\n      };\n\n      // Either the type is a module, a pipe, or a component/directive (which may not have an\n      // ngComponentDef as it might be compiled asynchronously).\n      if (isNgModule(exportedTyped)) {\n        // When this module exports another, the exported module's exported directives and pipes are\n        // added to both the compilation and exported scopes of this module.\n        const exportedScope = this._transitiveScopesFor(exportedTyped, resolvers);\n        exportedScope.exported.directives.forEach(entry => {\n          scopes.compilation.directives.add(entry);\n          scopes.exported.directives.add(entry);\n        });\n        exportedScope.exported.pipes.forEach(entry => {\n          scopes.compilation.pipes.add(entry);\n          scopes.exported.pipes.add(entry);\n        });\n      } else if (exportedTyped.ngPipeDef !== undefined) {\n        scopes.exported.pipes.add(exportedTyped);\n      } else {\n        scopes.exported.directives.add(exportedTyped);\n      }\n    });\n\n    def.transitiveCompileScopes = scopes;\n    return scopes;\n  }\n}\n\nlet testBed: TestBedRender3;\n\nexport function _getTestBedRender3(): TestBedRender3 {\n  return testBed = testBed || new TestBedRender3();\n}\n\nconst OWNER_MODULE = '__NG_MODULE__';\n/**\n * This function clears the OWNER_MODULE property from the Types. This is set in\n * r3/jit/modules.ts. It is common for the same Type to be compiled in different tests. If we don't\n * clear this we will get errors which will complain that the same Component/Directive is in more\n * than one NgModule.\n */\nfunction clearNgModules(type: Type<any>) {\n  if (type.hasOwnProperty(OWNER_MODULE)) {\n    (type as any)[OWNER_MODULE] = undefined;\n  }\n}\n\nfunction flatten<T>(values: any[], mapFn?: (value: T) => any): T[] {\n  const out: T[] = [];\n  values.forEach(value => {\n    if (Array.isArray(value)) {\n      out.push(...flatten<T>(value, mapFn));\n    } else {\n      out.push(mapFn ? mapFn(value) : value);\n    }\n  });\n  return out;\n}\n\nfunction isNgModule<T>(value: Type<T>): value is Type<T>&{ngModuleDef: NgModuleDef<T>} {\n  return (value as{ngModuleDef?: NgModuleDef<T>}).ngModuleDef !== undefined;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Compiler, CompilerOptions, Component, ComponentFactory, Directive, Injectable, Injector, NgModule, Pipe, Type} from '@angular/core';\n\nimport {MetadataOverride} from './metadata_override';\n\nfunction unimplemented(): any {\n  throw Error('unimplemented');\n}\n\n/**\n * Special interface to the compiler only used by testing\n *\n * @publicApi\n */\n@Injectable()\nexport class TestingCompiler extends Compiler {\n  get injector(): Injector { throw unimplemented(); }\n  overrideModule(module: Type<any>, overrides: MetadataOverride<NgModule>): void {\n    throw unimplemented();\n  }\n  overrideDirective(directive: Type<any>, overrides: MetadataOverride<Directive>): void {\n    throw unimplemented();\n  }\n  overrideComponent(component: Type<any>, overrides: MetadataOverride<Component>): void {\n    throw unimplemented();\n  }\n  overridePipe(directive: Type<any>, overrides: MetadataOverride<Pipe>): void {\n    throw unimplemented();\n  }\n  /**\n   * Allows to pass the compile summary from AOT compilation to the JIT compiler,\n   * so that it can use the code generated by AOT.\n   */\n  loadAotSummaries(summaries: () => any[]) { throw unimplemented(); }\n\n  /**\n   * Gets the component factory for the given component.\n   * This assumes that the component has been compiled before calling this call using\n   * `compileModuleAndAllComponents*`.\n   */\n  getComponentFactory<T>(component: Type<T>): ComponentFactory<T> { throw unimplemented(); }\n\n  /**\n   * Returns the component type that is stored in the given error.\n   * This can be used for errors created by compileModule...\n   */\n  getComponentFromError(error: Error): Type<any>|null { throw unimplemented(); }\n}\n\n/**\n * A factory for creating a Compiler\n *\n * @publicApi\n */\nexport abstract class TestingCompilerFactory {\n  abstract createTestingCompiler(options?: CompilerOptions[]): TestingCompiler;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ApplicationInitStatus, CompilerOptions, Component, Directive, Injector, NgModule, NgModuleFactory, NgModuleRef, NgZone, Optional, Pipe, PlatformRef, Provider, SchemaMetadata, SkipSelf, StaticProvider, Type, ÉµAPP_ROOT as APP_ROOT, ÉµDepFlags as DepFlags, ÉµInjectableDef as InjectableDef, ÉµNodeFlags as NodeFlags, ÉµclearOverrides as clearOverrides, ÉµgetInjectableDef as getInjectableDef, ÉµivyEnabled as ivyEnabled, ÉµoverrideComponentView as overrideComponentView, ÉµoverrideProvider as overrideProvider, Éµstringify as stringify} from '@angular/core';\n\nimport {AsyncTestCompleter} from './async_test_completer';\nimport {ComponentFixture} from './component_fixture';\nimport {MetadataOverride} from './metadata_override';\nimport {TestBedRender3, _getTestBedRender3} from './r3_test_bed';\nimport {ComponentFixtureAutoDetect, ComponentFixtureNoNgZone, TestBedStatic, TestComponentRenderer, TestModuleMetadata} from './test_bed_common';\nimport {TestingCompiler, TestingCompilerFactory} from './test_compiler';\n\n\nconst UNDEFINED = new Object();\n\n\nlet _nextRootElementId = 0;\n\n/**\n * @publicApi\n */\nexport interface TestBed {\n  platform: PlatformRef;\n\n  ngModule: Type<any>|Type<any>[];\n\n  /**\n   * Initialize the environment for testing with a compiler factory, a PlatformRef, and an\n   * angular module. These are common to every test in the suite.\n   *\n   * This may only be called once, to set up the common providers for the current test\n   * suite on the current platform. If you absolutely need to change the providers,\n   * first use `resetTestEnvironment`.\n   *\n   * Test modules and platforms for individual platforms are available from\n   * '@angular/<platform_name>/testing'.\n   */\n  initTestEnvironment(\n      ngModule: Type<any>|Type<any>[], platform: PlatformRef, aotSummaries?: () => any[]): void;\n\n  /**\n   * Reset the providers for the test injector.\n   */\n  resetTestEnvironment(): void;\n\n  resetTestingModule(): void;\n\n  configureCompiler(config: {providers?: any[], useJit?: boolean}): void;\n\n  configureTestingModule(moduleDef: TestModuleMetadata): void;\n\n  compileComponents(): Promise<any>;\n\n  get(token: any, notFoundValue?: any): any;\n\n  execute(tokens: any[], fn: Function, context?: any): any;\n\n  overrideModule(ngModule: Type<any>, override: MetadataOverride<NgModule>): void;\n\n  overrideComponent(component: Type<any>, override: MetadataOverride<Component>): void;\n\n  overrideDirective(directive: Type<any>, override: MetadataOverride<Directive>): void;\n\n  overridePipe(pipe: Type<any>, override: MetadataOverride<Pipe>): void;\n\n  /**\n   * Overwrites all providers for the given token with the given provider definition.\n   */\n  overrideProvider(token: any, provider: {\n    useFactory: Function,\n    deps: any[],\n  }): void;\n  overrideProvider(token: any, provider: {useValue: any;}): void;\n  overrideProvider(token: any, provider: {useFactory?: Function, useValue?: any, deps?: any[]}):\n      void;\n\n  /**\n   * Overwrites all providers for the given token with the given provider definition.\n   *\n   * @deprecated as it makes all NgModules lazy. Introduced only for migrating off of it.\n   */\n  deprecatedOverrideProvider(token: any, provider: {\n    useFactory: Function,\n    deps: any[],\n  }): void;\n  deprecatedOverrideProvider(token: any, provider: {useValue: any;}): void;\n  deprecatedOverrideProvider(\n      token: any, provider: {useFactory?: Function, useValue?: any, deps?: any[]}): void;\n\n\n  overrideTemplateUsingTestingModule(component: Type<any>, template: string): void;\n\n  createComponent<T>(component: Type<T>): ComponentFixture<T>;\n}\n\n/**\n * @description\n * Configures and initializes environment for unit testing and provides methods for\n * creating components and services in unit tests.\n *\n * `TestBed` is the primary api for writing unit tests for Angular applications and libraries.\n *\n * Note: Use `TestBed` in tests. It will be set to either `TestBedViewEngine` or `TestBedRender3`\n * according to the compiler used.\n */\nexport class TestBedViewEngine implements Injector, TestBed {\n  /**\n   * Initialize the environment for testing with a compiler factory, a PlatformRef, and an\n   * angular module. These are common to every test in the suite.\n   *\n   * This may only be called once, to set up the common providers for the current test\n   * suite on the current platform. If you absolutely need to change the providers,\n   * first use `resetTestEnvironment`.\n   *\n   * Test modules and platforms for individual platforms are available from\n   * '@angular/<platform_name>/testing'.\n   */\n  static initTestEnvironment(\n      ngModule: Type<any>|Type<any>[], platform: PlatformRef,\n      aotSummaries?: () => any[]): TestBedViewEngine {\n    const testBed = _getTestBedViewEngine();\n    testBed.initTestEnvironment(ngModule, platform, aotSummaries);\n    return testBed;\n  }\n\n  /**\n   * Reset the providers for the test injector.\n   */\n  static resetTestEnvironment(): void { _getTestBedViewEngine().resetTestEnvironment(); }\n\n  static resetTestingModule(): TestBedStatic {\n    _getTestBedViewEngine().resetTestingModule();\n    return TestBedViewEngine as any as TestBedStatic;\n  }\n\n  /**\n   * Allows overriding default compiler providers and settings\n   * which are defined in test_injector.js\n   */\n  static configureCompiler(config: {providers?: any[]; useJit?: boolean;}): TestBedStatic {\n    _getTestBedViewEngine().configureCompiler(config);\n    return TestBedViewEngine as any as TestBedStatic;\n  }\n\n  /**\n   * Allows overriding default providers, directives, pipes, modules of the test injector,\n   * which are defined in test_injector.js\n   */\n  static configureTestingModule(moduleDef: TestModuleMetadata): TestBedStatic {\n    _getTestBedViewEngine().configureTestingModule(moduleDef);\n    return TestBedViewEngine as any as TestBedStatic;\n  }\n\n  /**\n   * Compile components with a `templateUrl` for the test's NgModule.\n   * It is necessary to call this function\n   * as fetching urls is asynchronous.\n   */\n  static compileComponents(): Promise<any> { return getTestBed().compileComponents(); }\n\n  static overrideModule(ngModule: Type<any>, override: MetadataOverride<NgModule>): TestBedStatic {\n    _getTestBedViewEngine().overrideModule(ngModule, override);\n    return TestBedViewEngine as any as TestBedStatic;\n  }\n\n  static overrideComponent(component: Type<any>, override: MetadataOverride<Component>):\n      TestBedStatic {\n    _getTestBedViewEngine().overrideComponent(component, override);\n    return TestBedViewEngine as any as TestBedStatic;\n  }\n\n  static overrideDirective(directive: Type<any>, override: MetadataOverride<Directive>):\n      TestBedStatic {\n    _getTestBedViewEngine().overrideDirective(directive, override);\n    return TestBedViewEngine as any as TestBedStatic;\n  }\n\n  static overridePipe(pipe: Type<any>, override: MetadataOverride<Pipe>): TestBedStatic {\n    _getTestBedViewEngine().overridePipe(pipe, override);\n    return TestBedViewEngine as any as TestBedStatic;\n  }\n\n  static overrideTemplate(component: Type<any>, template: string): TestBedStatic {\n    _getTestBedViewEngine().overrideComponent(component, {set: {template, templateUrl: null !}});\n    return TestBedViewEngine as any as TestBedStatic;\n  }\n\n  /**\n   * Overrides the template of the given component, compiling the template\n   * in the context of the TestingModule.\n   *\n   * Note: This works for JIT and AOTed components as well.\n   */\n  static overrideTemplateUsingTestingModule(component: Type<any>, template: string): TestBedStatic {\n    _getTestBedViewEngine().overrideTemplateUsingTestingModule(component, template);\n    return TestBedViewEngine as any as TestBedStatic;\n  }\n\n  /**\n   * Overwrites all providers for the given token with the given provider definition.\n   *\n   * Note: This works for JIT and AOTed components as well.\n   */\n  static overrideProvider(token: any, provider: {\n    useFactory: Function,\n    deps: any[],\n  }): TestBedStatic;\n  static overrideProvider(token: any, provider: {useValue: any;}): TestBedStatic;\n  static overrideProvider(token: any, provider: {\n    useFactory?: Function,\n    useValue?: any,\n    deps?: any[],\n  }): TestBedStatic {\n    _getTestBedViewEngine().overrideProvider(token, provider as any);\n    return TestBedViewEngine as any as TestBedStatic;\n  }\n\n  /**\n   * Overwrites all providers for the given token with the given provider definition.\n   *\n   * @deprecated as it makes all NgModules lazy. Introduced only for migrating off of it.\n   */\n  static deprecatedOverrideProvider(token: any, provider: {\n    useFactory: Function,\n    deps: any[],\n  }): void;\n  static deprecatedOverrideProvider(token: any, provider: {useValue: any;}): void;\n  static deprecatedOverrideProvider(token: any, provider: {\n    useFactory?: Function,\n    useValue?: any,\n    deps?: any[],\n  }): TestBedStatic {\n    _getTestBedViewEngine().deprecatedOverrideProvider(token, provider as any);\n    return TestBedViewEngine as any as TestBedStatic;\n  }\n\n  static get(token: any, notFoundValue: any = Injector.THROW_IF_NOT_FOUND) {\n    return _getTestBedViewEngine().get(token, notFoundValue);\n  }\n\n  static createComponent<T>(component: Type<T>): ComponentFixture<T> {\n    return _getTestBedViewEngine().createComponent(component);\n  }\n\n  private _instantiated: boolean = false;\n\n  private _compiler: TestingCompiler = null !;\n  private _moduleRef: NgModuleRef<any> = null !;\n  private _moduleFactory: NgModuleFactory<any> = null !;\n\n  private _compilerOptions: CompilerOptions[] = [];\n\n  private _moduleOverrides: [Type<any>, MetadataOverride<NgModule>][] = [];\n  private _componentOverrides: [Type<any>, MetadataOverride<Component>][] = [];\n  private _directiveOverrides: [Type<any>, MetadataOverride<Directive>][] = [];\n  private _pipeOverrides: [Type<any>, MetadataOverride<Pipe>][] = [];\n\n  private _providers: Provider[] = [];\n  private _declarations: Array<Type<any>|any[]|any> = [];\n  private _imports: Array<Type<any>|any[]|any> = [];\n  private _schemas: Array<SchemaMetadata|any[]> = [];\n  private _activeFixtures: ComponentFixture<any>[] = [];\n\n  private _testEnvAotSummaries: () => any[] = () => [];\n  private _aotSummaries: Array<() => any[]> = [];\n  private _templateOverrides: Array<{component: Type<any>, templateOf: Type<any>}> = [];\n\n  private _isRoot: boolean = true;\n  private _rootProviderOverrides: Provider[] = [];\n\n  platform: PlatformRef = null !;\n\n  ngModule: Type<any>|Type<any>[] = null !;\n\n  /**\n   * Initialize the environment for testing with a compiler factory, a PlatformRef, and an\n   * angular module. These are common to every test in the suite.\n   *\n   * This may only be called once, to set up the common providers for the current test\n   * suite on the current platform. If you absolutely need to change the providers,\n   * first use `resetTestEnvironment`.\n   *\n   * Test modules and platforms for individual platforms are available from\n   * '@angular/<platform_name>/testing'.\n   */\n  initTestEnvironment(\n      ngModule: Type<any>|Type<any>[], platform: PlatformRef, aotSummaries?: () => any[]): void {\n    if (this.platform || this.ngModule) {\n      throw new Error('Cannot set base providers because it has already been called');\n    }\n    this.platform = platform;\n    this.ngModule = ngModule;\n    if (aotSummaries) {\n      this._testEnvAotSummaries = aotSummaries;\n    }\n  }\n\n  /**\n   * Reset the providers for the test injector.\n   */\n  resetTestEnvironment(): void {\n    this.resetTestingModule();\n    this.platform = null !;\n    this.ngModule = null !;\n    this._testEnvAotSummaries = () => [];\n  }\n\n  resetTestingModule(): void {\n    clearOverrides();\n    this._aotSummaries = [];\n    this._templateOverrides = [];\n    this._compiler = null !;\n    this._moduleOverrides = [];\n    this._componentOverrides = [];\n    this._directiveOverrides = [];\n    this._pipeOverrides = [];\n\n    this._isRoot = true;\n    this._rootProviderOverrides = [];\n\n    this._moduleRef = null !;\n    this._moduleFactory = null !;\n    this._compilerOptions = [];\n    this._providers = [];\n    this._declarations = [];\n    this._imports = [];\n    this._schemas = [];\n    this._instantiated = false;\n    this._activeFixtures.forEach((fixture) => {\n      try {\n        fixture.destroy();\n      } catch (e) {\n        console.error('Error during cleanup of component', {\n          component: fixture.componentInstance,\n          stacktrace: e,\n        });\n      }\n    });\n    this._activeFixtures = [];\n  }\n\n  configureCompiler(config: {providers?: any[], useJit?: boolean}): void {\n    this._assertNotInstantiated('TestBed.configureCompiler', 'configure the compiler');\n    this._compilerOptions.push(config);\n  }\n\n  configureTestingModule(moduleDef: TestModuleMetadata): void {\n    this._assertNotInstantiated('TestBed.configureTestingModule', 'configure the test module');\n    if (moduleDef.providers) {\n      this._providers.push(...moduleDef.providers);\n    }\n    if (moduleDef.declarations) {\n      this._declarations.push(...moduleDef.declarations);\n    }\n    if (moduleDef.imports) {\n      this._imports.push(...moduleDef.imports);\n    }\n    if (moduleDef.schemas) {\n      this._schemas.push(...moduleDef.schemas);\n    }\n    if (moduleDef.aotSummaries) {\n      this._aotSummaries.push(moduleDef.aotSummaries);\n    }\n  }\n\n  compileComponents(): Promise<any> {\n    if (this._moduleFactory || this._instantiated) {\n      return Promise.resolve(null);\n    }\n\n    const moduleType = this._createCompilerAndModule();\n    return this._compiler.compileModuleAndAllComponentsAsync(moduleType)\n        .then((moduleAndComponentFactories) => {\n          this._moduleFactory = moduleAndComponentFactories.ngModuleFactory;\n        });\n  }\n\n  private _initIfNeeded(): void {\n    if (this._instantiated) {\n      return;\n    }\n    if (!this._moduleFactory) {\n      try {\n        const moduleType = this._createCompilerAndModule();\n        this._moduleFactory =\n            this._compiler.compileModuleAndAllComponentsSync(moduleType).ngModuleFactory;\n      } catch (e) {\n        const errorCompType = this._compiler.getComponentFromError(e);\n        if (errorCompType) {\n          throw new Error(\n              `This test module uses the component ${stringify(errorCompType)} which is using a \"templateUrl\" or \"styleUrls\", but they were never compiled. ` +\n              `Please call \"TestBed.compileComponents\" before your test.`);\n        } else {\n          throw e;\n        }\n      }\n    }\n    for (const {component, templateOf} of this._templateOverrides) {\n      const compFactory = this._compiler.getComponentFactory(templateOf);\n      overrideComponentView(component, compFactory);\n    }\n\n    const ngZone = new NgZone({enableLongStackTrace: true});\n    const providers: StaticProvider[] = [{provide: NgZone, useValue: ngZone}];\n    const ngZoneInjector = Injector.create({\n      providers: providers,\n      parent: this.platform.injector,\n      name: this._moduleFactory.moduleType.name\n    });\n    this._moduleRef = this._moduleFactory.create(ngZoneInjector);\n    // ApplicationInitStatus.runInitializers() is marked @internal to core. So casting to any\n    // before accessing it.\n    (this._moduleRef.injector.get(ApplicationInitStatus) as any).runInitializers();\n    this._instantiated = true;\n  }\n\n  private _createCompilerAndModule(): Type<any> {\n    const providers = this._providers.concat([{provide: TestBed, useValue: this}]);\n    const declarations =\n        [...this._declarations, ...this._templateOverrides.map(entry => entry.templateOf)];\n\n    const rootScopeImports = [];\n    const rootProviderOverrides = this._rootProviderOverrides;\n    if (this._isRoot) {\n      @NgModule({\n        providers: [\n          ...rootProviderOverrides,\n        ],\n        jit: true,\n      })\n      class RootScopeModule {\n      }\n      rootScopeImports.push(RootScopeModule);\n    }\n    providers.push({provide: APP_ROOT, useValue: this._isRoot});\n\n    const imports = [rootScopeImports, this.ngModule, this._imports];\n    const schemas = this._schemas;\n\n    @NgModule({providers, declarations, imports, schemas, jit: true})\n    class DynamicTestModule {\n    }\n\n    const compilerFactory: TestingCompilerFactory =\n        this.platform.injector.get(TestingCompilerFactory);\n    this._compiler = compilerFactory.createTestingCompiler(this._compilerOptions);\n    for (const summary of [this._testEnvAotSummaries, ...this._aotSummaries]) {\n      this._compiler.loadAotSummaries(summary);\n    }\n    this._moduleOverrides.forEach((entry) => this._compiler.overrideModule(entry[0], entry[1]));\n    this._componentOverrides.forEach(\n        (entry) => this._compiler.overrideComponent(entry[0], entry[1]));\n    this._directiveOverrides.forEach(\n        (entry) => this._compiler.overrideDirective(entry[0], entry[1]));\n    this._pipeOverrides.forEach((entry) => this._compiler.overridePipe(entry[0], entry[1]));\n    return DynamicTestModule;\n  }\n\n  private _assertNotInstantiated(methodName: string, methodDescription: string) {\n    if (this._instantiated) {\n      throw new Error(\n          `Cannot ${methodDescription} when the test module has already been instantiated. ` +\n          `Make sure you are not using \\`inject\\` before \\`${methodName}\\`.`);\n    }\n  }\n\n  get(token: any, notFoundValue: any = Injector.THROW_IF_NOT_FOUND): any {\n    this._initIfNeeded();\n    if (token === TestBed) {\n      return this;\n    }\n    // Tests can inject things from the ng module and from the compiler,\n    // but the ng module can't inject things from the compiler and vice versa.\n    const result = this._moduleRef.injector.get(token, UNDEFINED);\n    return result === UNDEFINED ? this._compiler.injector.get(token, notFoundValue) : result;\n  }\n\n  execute(tokens: any[], fn: Function, context?: any): any {\n    this._initIfNeeded();\n    const params = tokens.map(t => this.get(t));\n    return fn.apply(context, params);\n  }\n\n  overrideModule(ngModule: Type<any>, override: MetadataOverride<NgModule>): void {\n    this._assertNotInstantiated('overrideModule', 'override module metadata');\n    this._moduleOverrides.push([ngModule, override]);\n  }\n\n  overrideComponent(component: Type<any>, override: MetadataOverride<Component>): void {\n    this._assertNotInstantiated('overrideComponent', 'override component metadata');\n    this._componentOverrides.push([component, override]);\n  }\n\n  overrideDirective(directive: Type<any>, override: MetadataOverride<Directive>): void {\n    this._assertNotInstantiated('overrideDirective', 'override directive metadata');\n    this._directiveOverrides.push([directive, override]);\n  }\n\n  overridePipe(pipe: Type<any>, override: MetadataOverride<Pipe>): void {\n    this._assertNotInstantiated('overridePipe', 'override pipe metadata');\n    this._pipeOverrides.push([pipe, override]);\n  }\n\n  /**\n   * Overwrites all providers for the given token with the given provider definition.\n   */\n  overrideProvider(token: any, provider: {\n    useFactory: Function,\n    deps: any[],\n  }): void;\n  overrideProvider(token: any, provider: {useValue: any;}): void;\n  overrideProvider(token: any, provider: {useFactory?: Function, useValue?: any, deps?: any[]}):\n      void {\n    this.overrideProviderImpl(token, provider);\n  }\n\n  /**\n   * Overwrites all providers for the given token with the given provider definition.\n   *\n   * @deprecated as it makes all NgModules lazy. Introduced only for migrating off of it.\n   */\n  deprecatedOverrideProvider(token: any, provider: {\n    useFactory: Function,\n    deps: any[],\n  }): void;\n  deprecatedOverrideProvider(token: any, provider: {useValue: any;}): void;\n  deprecatedOverrideProvider(\n      token: any, provider: {useFactory?: Function, useValue?: any, deps?: any[]}): void {\n    this.overrideProviderImpl(token, provider, /* deprecated */ true);\n  }\n\n  private overrideProviderImpl(\n      token: any, provider: {\n        useFactory?: Function,\n        useValue?: any,\n        deps?: any[],\n      },\n      deprecated = false): void {\n    let def: InjectableDef<any>|null = null;\n    if (typeof token !== 'string' && (def = getInjectableDef(token)) && def.providedIn === 'root') {\n      if (provider.useFactory) {\n        this._rootProviderOverrides.push(\n            {provide: token, useFactory: provider.useFactory, deps: provider.deps || []});\n      } else {\n        this._rootProviderOverrides.push({provide: token, useValue: provider.useValue});\n      }\n    }\n    let flags: NodeFlags = 0;\n    let value: any;\n    if (provider.useFactory) {\n      flags |= NodeFlags.TypeFactoryProvider;\n      value = provider.useFactory;\n    } else {\n      flags |= NodeFlags.TypeValueProvider;\n      value = provider.useValue;\n    }\n    const deps = (provider.deps || []).map((dep) => {\n      let depFlags: DepFlags = DepFlags.None;\n      let depToken: any;\n      if (Array.isArray(dep)) {\n        dep.forEach((entry: any) => {\n          if (entry instanceof Optional) {\n            depFlags |= DepFlags.Optional;\n          } else if (entry instanceof SkipSelf) {\n            depFlags |= DepFlags.SkipSelf;\n          } else {\n            depToken = entry;\n          }\n        });\n      } else {\n        depToken = dep;\n      }\n      return [depFlags, depToken];\n    });\n    overrideProvider({token, flags, deps, value, deprecatedBehavior: deprecated});\n  }\n\n  overrideTemplateUsingTestingModule(component: Type<any>, template: string) {\n    this._assertNotInstantiated('overrideTemplateUsingTestingModule', 'override template');\n\n    @Component({selector: 'empty', template, jit: true})\n    class OverrideComponent {\n    }\n\n    this._templateOverrides.push({component, templateOf: OverrideComponent});\n  }\n\n  createComponent<T>(component: Type<T>): ComponentFixture<T> {\n    this._initIfNeeded();\n    const componentFactory = this._compiler.getComponentFactory(component);\n\n    if (!componentFactory) {\n      throw new Error(\n          `Cannot create the component ${stringify(component)} as it was not imported into the testing module!`);\n    }\n\n    const noNgZone = this.get(ComponentFixtureNoNgZone, false);\n    const autoDetect: boolean = this.get(ComponentFixtureAutoDetect, false);\n    const ngZone: NgZone = noNgZone ? null : this.get(NgZone, null);\n    const testComponentRenderer: TestComponentRenderer = this.get(TestComponentRenderer);\n    const rootElId = `root${_nextRootElementId++}`;\n    testComponentRenderer.insertRootElement(rootElId);\n\n    const initComponent = () => {\n      const componentRef =\n          componentFactory.create(Injector.NULL, [], `#${rootElId}`, this._moduleRef);\n      return new ComponentFixture<T>(componentRef, ngZone, autoDetect);\n    };\n\n    const fixture = !ngZone ? initComponent() : ngZone.run(initComponent);\n    this._activeFixtures.push(fixture);\n    return fixture;\n  }\n}\n\n/**\n * @description\n * Configures and initializes environment for unit testing and provides methods for\n * creating components and services in unit tests.\n *\n * `TestBed` is the primary api for writing unit tests for Angular applications and libraries.\n *\n * Note: Use `TestBed` in tests. It will be set to either `TestBedViewEngine` or `TestBedRender3`\n * according to the compiler used.\n *\n * @publicApi\n */\nexport const TestBed: TestBedStatic =\n    ivyEnabled ? TestBedRender3 as any as TestBedStatic : TestBedViewEngine as any as TestBedStatic;\n\n/**\n * Returns a singleton of the applicable `TestBed`.\n *\n * It will be either an instance of `TestBedViewEngine` or `TestBedRender3`.\n *\n * @publicApi\n */\nexport const getTestBed: () => TestBed = ivyEnabled ? _getTestBedRender3 : _getTestBedViewEngine;\n\nlet testBed: TestBedViewEngine;\n\nfunction _getTestBedViewEngine(): TestBedViewEngine {\n  return testBed = testBed || new TestBedViewEngine();\n}\n\n/**\n * Allows injecting dependencies in `beforeEach()` and `it()`.\n *\n * Example:\n *\n * ```\n * beforeEach(inject([Dependency, AClass], (dep, object) => {\n *   // some code that uses `dep` and `object`\n *   // ...\n * }));\n *\n * it('...', inject([AClass], (object) => {\n *   object.doSomething();\n *   expect(...);\n * })\n * ```\n *\n * Notes:\n * - inject is currently a function because of some Traceur limitation the syntax should\n * eventually\n *   becomes `it('...', @Inject (object: AClass, async: AsyncTestCompleter) => { ... });`\n *\n * @publicApi\n */\nexport function inject(tokens: any[], fn: Function): () => any {\n  const testBed = getTestBed();\n  if (tokens.indexOf(AsyncTestCompleter) >= 0) {\n    // Not using an arrow function to preserve context passed from call site\n    return function() {\n      // Return an async test method that returns a Promise if AsyncTestCompleter is one of\n      // the injected tokens.\n      return testBed.compileComponents().then(() => {\n        const completer: AsyncTestCompleter = testBed.get(AsyncTestCompleter);\n        testBed.execute(tokens, fn, this);\n        return completer.promise;\n      });\n    };\n  } else {\n    // Not using an arrow function to preserve context passed from call site\n    return function() { return testBed.execute(tokens, fn, this); };\n  }\n}\n\n/**\n * @publicApi\n */\nexport class InjectSetupWrapper {\n  constructor(private _moduleDef: () => TestModuleMetadata) {}\n\n  private _addModule() {\n    const moduleDef = this._moduleDef();\n    if (moduleDef) {\n      getTestBed().configureTestingModule(moduleDef);\n    }\n  }\n\n  inject(tokens: any[], fn: Function): () => any {\n    const self = this;\n    // Not using an arrow function to preserve context passed from call site\n    return function() {\n      self._addModule();\n      return inject(tokens, fn).call(this);\n    };\n  }\n}\n\n/**\n * @publicApi\n */\nexport function withModule(moduleDef: TestModuleMetadata): InjectSetupWrapper;\nexport function withModule(moduleDef: TestModuleMetadata, fn: Function): () => any;\nexport function withModule(moduleDef: TestModuleMetadata, fn?: Function | null): (() => any)|\n    InjectSetupWrapper {\n  if (fn) {\n    // Not using an arrow function to preserve context passed from call site\n    return function() {\n      const testBed = getTestBed();\n      if (moduleDef) {\n        testBed.configureTestingModule(moduleDef);\n      }\n      return fn.apply(this);\n    };\n  }\n  return new InjectSetupWrapper(() => moduleDef);\n}","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Public Test Library for unit testing Angular applications. Assumes that you are running\n * with Jasmine, Mocha, or a similar framework which exports a beforeEach function and\n * allows tests to be asynchronous by either returning a promise or using a 'done' parameter.\n */\n\nimport {resetFakeAsyncZone} from './fake_async';\nimport {TestBed} from './test_bed';\n\ndeclare var global: any;\n\nconst _global = <any>(typeof window === 'undefined' ? global : window);\n\n// Reset the test providers and the fake async zone before each test.\nif (_global.beforeEach) {\n  _global.beforeEach(() => {\n    TestBed.resetTestingModule();\n    resetFakeAsyncZone();\n  });\n}\n\n// TODO(juliemr): remove this, only used because we need to export something to have compilation\n// work.\nexport const __core_private_testing_placeholder__ = '';\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport {TestingCompiler as ÉµTestingCompiler, TestingCompilerFactory as ÉµTestingCompilerFactory} from './test_compiler';\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @module\n * @description\n * Entry point for all public APIs of the core/testing package.\n */\n\nexport * from './async';\nexport * from './component_fixture';\nexport * from './fake_async';\nexport {TestBed, getTestBed, inject, InjectSetupWrapper, withModule} from './test_bed';\nexport * from './test_bed_common';\nexport * from './before_each';\nexport * from './metadata_override';\nexport {MetadataOverrider as ÉµMetadataOverrider} from './metadata_overrider';\nexport * from './private_export_testing';\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/// <reference types=\"jasmine\" />\n\n/**\n * @module\n * @description\n * Entry point for all public APIs of this package.\n */\nexport * from './src/testing';\n\n// This file only reexports content of the `src` folder. Keep it that way.\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n// This file is not used to build this module. It is only used during editing\n// by the TypeScript language service and during build for verification. `ngc`\n// replaces this file with production index.ts when it rewrites private symbol\n// names.\n\nexport * from './public_api';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n\nexport {TestBedRender3 as Éµangular_packages_core_testing_testing_b,_getTestBedRender3 as Éµangular_packages_core_testing_testing_c} from './src/r3_test_bed';\nexport {TestBedViewEngine as Éµangular_packages_core_testing_testing_a} from './src/test_bed';"]}