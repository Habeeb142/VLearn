{"version":3,"file":"router.d.ts","sources":["router.d.ts"],"names":[],"mappingssourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Location } from '@angular/common';\nimport { Compiler, Injector, NgModuleFactoryLoader, Type } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { QueryParamsHandling, Routes } from './config';\nimport { Event, NavigationTrigger } from './events';\nimport { RouteReuseStrategy } from './route_reuse_strategy';\nimport { ChildrenOutletContexts } from './router_outlet_context';\nimport { ActivatedRoute, RouterState, RouterStateSnapshot } from './router_state';\nimport { Params } from './shared';\nimport { UrlHandlingStrategy } from './url_handling_strategy';\nimport { UrlSerializer, UrlTree } from './url_tree';\nimport { Checks } from './utils/preactivation';\n/**\n * @description\n *\n * Options that modify the navigation strategy.\n *\n * @publicApi\n */\nexport interface NavigationExtras {\n    /**\n     * Enables relative navigation from the current ActivatedRoute.\n     *\n     * Configuration:\n     *\n     * ```\n     * [{\n    *   path: 'parent',\n    *   component: ParentComponent,\n    *   children: [{\n    *     path: 'list',\n    *     component: ListComponent\n    *   },{\n    *     path: 'child',\n    *     component: ChildComponent\n    *   }]\n    * }]\n     * ```\n     *\n     * Navigate to list route from child route:\n     *\n     * ```\n     *  @Component({...})\n     *  class ChildComponent {\n    *    constructor(private router: Router, private route: ActivatedRoute) {}\n    *\n    *    go() {\n    *      this.router.navigate(['../list'], { relativeTo: this.route });\n    *    }\n    *  }\n     * ```\n     */\n    relativeTo?: ActivatedRoute | null;\n    /**\n     * Sets query parameters to the URL.\n     *\n     * ```\n     * // Navigate to /results?page=1\n     * this.router.navigate(['/results'], { queryParams: { page: 1 } });\n     * ```\n     */\n    queryParams?: Params | null;\n    /**\n     * Sets the hash fragment for the URL.\n     *\n     * ```\n     * // Navigate to /results#top\n     * this.router.navigate(['/results'], { fragment: 'top' });\n     * ```\n     */\n    fragment?: string;\n    /**\n     * DEPRECATED: Use `queryParamsHandling` instead to preserve\n     * query parameters for the next navigation.\n     *\n     * ```\n     * // Preserve query params from /results?page=1 to /view?page=1\n     * this.router.navigate(['/view'], { preserveQueryParams: true });\n     * ```\n     *\n     * @deprecated since v4\n     */\n    preserveQueryParams?: boolean;\n    /**\n     * Configuration strategy for how to handle query parameters for the next navigation.\n     *\n     * ```\n     * // from /results?page=1 to /view?page=1&page=2\n     * this.router.navigate(['/view'], { queryParams: { page: 2 },  queryParamsHandling: \"merge\" });\n     * ```\n     */\n    queryParamsHandling?: QueryParamsHandling | null;\n    /**\n     * Preserves the fragment for the next navigation\n     *\n     * ```\n     * // Preserve fragment from /results#top to /view#top\n     * this.router.navigate(['/view'], { preserveFragment: true });\n     * ```\n     */\n    preserveFragment?: boolean;\n    /**\n     * Navigates without pushing a new state into history.\n     *\n     * ```\n     * // Navigate silently to /view\n     * this.router.navigate(['/view'], { skipLocationChange: true });\n     * ```\n     */\n    skipLocationChange?: boolean;\n    /**\n     * Navigates while replacing the current state in history.\n     *\n     * ```\n     * // Navigate to /view\n     * this.router.navigate(['/view'], { replaceUrl: true });\n     * ```\n     */\n    replaceUrl?: boolean;\n    /**\n     * State passed to any navigation. This value will be accessible through the `extras` object\n     * returned from `router.getCurrentNavigation()` while a navigation is executing. Once a\n     * navigation completes, this value will be written to `history.state` when the `location.go`\n     * or `location.replaceState` method is called before activating of this route. Note that\n     * `history.state` will not pass an object equality test because the `navigationId` will be\n     * added to the state before being written.\n     *\n     * While `history.state` can accept any type of value, because the router adds the `navigationId`\n     * on each navigation, the `state` must always be an object.\n     */\n    state?: {\n        [k: string]: any;\n    };\n}\n/**\n * @description\n *\n * Error handler that is invoked when a navigation errors.\n *\n * If the handler returns a value, the navigation promise will be resolved with this value.\n * If the handler throws an exception, the navigation promise will be rejected with\n * the exception.\n *\n * @publicApi\n */\nexport declare type ErrorHandler = (error: any) => any;\nexport declare type RestoredState = {\n    [k: string]: any;\n    navigationId: number;\n};\n/**\n * @description\n *\n * Information about any given navigation. This information can be gotten from the router at\n * any time using the `router.getCurrentNavigation()` method.\n *\n * @publicApi\n */\nexport declare type Navigation = {\n    /**\n     * The ID of the current navigation.\n     */\n    id: number;\n    /**\n     * Target URL passed into the {@link Router#navigateByUrl} call before navigation. This is\n     * the value before the router has parsed or applied redirects to it.\n     */\n    initialUrl: string | UrlTree;\n    /**\n     * The initial target URL after being parsed with {@link UrlSerializer.extract()}.\n     */\n    extractedUrl: UrlTree;\n    /**\n     * Extracted URL after redirects have been applied. This URL may not be available immediately,\n     * therefore this property can be `undefined`. It is guaranteed to be set after the\n     * {@link RoutesRecognized} event fires.\n     */\n    finalUrl?: UrlTree;\n    /**\n     * Identifies the trigger of the navigation.\n     *\n     * * 'imperative'--triggered by `router.navigateByUrl` or `router.navigate`.\n     * * 'popstate'--triggered by a popstate event\n     * * 'hashchange'--triggered by a hashchange event\n     */\n    trigger: 'imperative' | 'popstate' | 'hashchange';\n    /**\n     * The NavigationExtras used in this navigation. See {@link NavigationExtras} for more info.\n     */\n    extras: NavigationExtras;\n    /**\n     * Previously successful Navigation object. Only a single previous Navigation is available,\n     * therefore this previous Navigation will always have a `null` value for `previousNavigation`.\n     */\n    previousNavigation: Navigation | null;\n};\nexport declare type NavigationTransition = {\n    id: number;\n    currentUrlTree: UrlTree;\n    currentRawUrl: UrlTree;\n    extractedUrl: UrlTree;\n    urlAfterRedirects: UrlTree;\n    rawUrl: UrlTree;\n    extras: NavigationExtras;\n    resolve: any;\n    reject: any;\n    promise: Promise<boolean>;\n    source: NavigationTrigger;\n    restoredState: RestoredState | null;\n    currentSnapshot: RouterStateSnapshot;\n    targetSnapshot: RouterStateSnapshot | null;\n    currentRouterState: RouterState;\n    targetRouterState: RouterState | null;\n    guards: Checks;\n    guardsResult: boolean | UrlTree | null;\n};\n/**\n * @description\n *\n * An NgModule that provides navigation and URL manipulation capabilities.\n *\n * @see `Route`.\n * @see [Routing and Navigation Guide](guide/router).\n *\n * @ngModule RouterModule\n *\n * @publicApi\n */\nexport declare class Router {\n    private rootComponentType;\n    private urlSerializer;\n    private rootContexts;\n    private location;\n    config: Routes;\n    private currentUrlTree;\n    private rawUrlTree;\n    private browserUrlTree;\n    private readonly transitions;\n    private navigations;\n    private lastSuccessfulNavigation;\n    private currentNavigation;\n    private locationSubscription;\n    private navigationId;\n    private configLoader;\n    private ngModule;\n    private console;\n    private isNgZoneEnabled;\n    /**\n     * An event stream for routing events in this NgModule.\n     */\n    readonly events: Observable<Event>;\n    /**\n     * The current state of routing in this NgModule.\n     */\n    readonly routerState: RouterState;\n    /**\n     * A handler for navigation errors in this NgModule.\n     */\n    errorHandler: ErrorHandler;\n    /**\n     * Malformed uri error handler is invoked when `Router.parseUrl(url)` throws an\n     * error due to containing an invalid character. The most common case would be a `%` sign\n     * that's not encoded and is not part of a percent encoded sequence.\n     */\n    malformedUriErrorHandler: (error: URIError, urlSerializer: UrlSerializer, url: string) => UrlTree;\n    /**\n     * True if at least one navigation event has occurred,\n     * false otherwise.\n     */\n    navigated: boolean;\n    private lastSuccessfulId;\n    /**\n     * Extracts and merges URLs. Used for AngularJS to Angular migrations.\n     */\n    urlHandlingStrategy: UrlHandlingStrategy;\n    /**\n     * The strategy for re-using routes.\n     */\n    routeReuseStrategy: RouteReuseStrategy;\n    /**\n     * How to handle a navigation request to the current URL. One of:\n     * - `'ignore'` :  The router ignores the request.\n     * - `'reload'` : The router reloads the URL. Use to implement a \"refresh\" feature.\n     */\n    onSameUrlNavigation: 'reload' | 'ignore';\n    /**\n     * How to merge parameters, data, and resolved data from parent to child\n     * routes. One of:\n     *\n     * - `'emptyOnly'` : Inherit parent parameters, data, and resolved data\n     * for path-less or component-less routes.\n     * - `'always'` : Inherit parent parameters, data, and resolved data\n     * for all child routes.\n     */\n    paramsInheritanceStrategy: 'emptyOnly' | 'always';\n    /**\n     * Defines when the router updates the browser URL. The default behavior is to update after\n     * successful navigation. However, some applications may prefer a mode where the URL gets\n     * updated at the beginning of navigation. The most common use case would be updating the\n     * URL early so if navigation fails, you can show an error message with the URL that failed.\n     * Available options are:\n     *\n     * - `'deferred'`, the default, updates the browser URL after navigation has finished.\n     * - `'eager'`, updates browser URL at the beginning of navigation.\n     */\n    urlUpdateStrategy: 'deferred' | 'eager';\n    /**\n     * See {@link RouterModule} for more information.\n     */\n    relativeLinkResolution: 'legacy' | 'corrected';\n    /**\n     * Creates the router service.\n     */\n    constructor(rootComponentType: Type<any> | null, urlSerializer: UrlSerializer, rootContexts: ChildrenOutletContexts, location: Location, injector: Injector, loader: NgModuleFactoryLoader, compiler: Compiler, config: Routes);\n    private setupNavigations;\n    private getTransition;\n    private setTransition;\n    /**\n     * Sets up the location change listener and performs the initial navigation.\n     */\n    initialNavigation(): void;\n    /**\n     * Sets up the location change listener.\n     */\n    setUpLocationChangeListener(): void;\n    /** The current URL. */\n    readonly url: string;\n    /** The current Navigation object if one exists */\n    getCurrentNavigation(): Navigation | null;\n    /**\n     * Resets the configuration used for navigation and generating links.\n     *\n     * @param config The route array for the new configuration.\n     *\n     * @usageNotes\n     *\n     * ```\n     * router.resetConfig([\n     *  { path: 'team/:id', component: TeamCmp, children: [\n     *    { path: 'simple', component: SimpleCmp },\n     *    { path: 'user/:name', component: UserCmp }\n     *  ]}\n     * ]);\n     * ```\n     */\n    resetConfig(config: Routes): void;\n    /** @docsNotRequired */\n    ngOnDestroy(): void;\n    /** Disposes of the router. */\n    dispose(): void;\n    /**\n     * Applies an array of commands to the current URL tree and creates a new URL tree.\n     *\n     * When given an activate route, applies the given commands starting from the route.\n     * When not given a route, applies the given command starting from the root.\n     *\n     * @param commands An array of commands to apply.\n     * @param navigationExtras\n     * @returns The new URL tree.\n     *\n     * @usageNotes\n     *\n     * ```\n     * // create /team/33/user/11\n     * router.createUrlTree(['/team', 33, 'user', 11]);\n     *\n     * // create /team/33;expand=true/user/11\n     * router.createUrlTree(['/team', 33, {expand: true}, 'user', 11]);\n     *\n     * // you can collapse static segments like this (this works only with the first passed-in value):\n     * router.createUrlTree(['/team/33/user', userId]);\n     *\n     * // If the first segment can contain slashes, and you do not want the router to split it, you\n     * // can do the following:\n     *\n     * router.createUrlTree([{segmentPath: '/one/two'}]);\n     *\n     * // create /team/33/(user/11//right:chat)\n     * router.createUrlTree(['/team', 33, {outlets: {primary: 'user/11', right: 'chat'}}]);\n     *\n     * // remove the right secondary node\n     * router.createUrlTree(['/team', 33, {outlets: {primary: 'user/11', right: null}}]);\n     *\n     * // assuming the current url is `/team/33/user/11` and the route points to `user/11`\n     *\n     * // navigate to /team/33/user/11/details\n     * router.createUrlTree(['details'], {relativeTo: route});\n     *\n     * // navigate to /team/33/user/22\n     * router.createUrlTree(['../22'], {relativeTo: route});\n     *\n     * // navigate to /team/44/user/22\n     * router.createUrlTree(['../../team/44/user/22'], {relativeTo: route});\n     * ```\n     */\n    createUrlTree(commands: any[], navigationExtras?: NavigationExtras): UrlTree;\n    /**\n     * Navigate based on the provided URL, which must be absolute.\n     *\n     * @param url An absolute URL. The function does not apply any delta to the current URL.\n     * @param extras An object containing properties that modify the navigation strategy.\n     * The function ignores any properties in the `NavigationExtras` that would change the\n     * provided URL.\n     *\n     * @returns A Promise that resolves to 'true' when navigation succeeds,\n     * to 'false' when navigation fails, or is rejected on error.\n     *\n     * @usageNotes\n     *\n     * ### Example\n     *\n     * ```\n     * router.navigateByUrl(\"/team/33/user/11\");\n     *\n     * // Navigate without updating the URL\n     * router.navigateByUrl(\"/team/33/user/11\", { skipLocationChange: true });\n     * ```\n     *\n     */\n    navigateByUrl(url: string | UrlTree, extras?: NavigationExtras): Promise<boolean>;\n    /**\n     * Navigate based on the provided array of commands and a starting point.\n     * If no starting route is provided, the navigation is absolute.\n     *\n     * Returns a promise that:\n     * - resolves to 'true' when navigation succeeds,\n     * - resolves to 'false' when navigation fails,\n     * - is rejected when an error happens.\n     *\n     * @usageNotes\n     *\n     * ### Example\n     *\n     * ```\n     * router.navigate(['team', 33, 'user', 11], {relativeTo: route});\n     *\n     * // Navigate without updating the URL\n     * router.navigate(['team', 33, 'user', 11], {relativeTo: route, skipLocationChange: true});\n     * ```\n     *\n     * The first parameter of `navigate()` is a delta to be applied to the current URL\n     * or the one provided in the `relativeTo` property of the second parameter (the\n     * `NavigationExtras`).\n     *\n     * In order to affect this browser's `history.state` entry, the `state`\n     * parameter can be passed. This must be an object because the router\n     * will add the `navigationId` property to this object before creating\n     * the new history item.\n     */\n    navigate(commands: any[], extras?: NavigationExtras): Promise<boolean>;\n    /** Serializes a `UrlTree` into a string */\n    serializeUrl(url: UrlTree): string;\n    /** Parses a string into a `UrlTree` */\n    parseUrl(url: string): UrlTree;\n    /** Returns whether the url is activated */\n    isActive(url: string | UrlTree, exact: boolean): boolean;\n    private removeEmptyProps;\n    private processNavigations;\n    private scheduleNavigation;\n    private setBrowserUrl;\n    private resetStateAndUrl;\n    private resetUrlToCurrentUrlTree;\n}\n"]}