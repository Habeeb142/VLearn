{"version":3,"file":"checkbox_value_accessor.d.ts","sources":["checkbox_value_accessor.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ElementRef, Renderer2 } from '@angular/core';\nimport { ControlValueAccessor } from './control_value_accessor';\nexport declare const CHECKBOX_VALUE_ACCESSOR: any;\n/**\n * @description\n * A `ControlValueAccessor` for writing a value and listening to changes on a checkbox input\n * element.\n *\n * @usageNotes\n *\n * ### Using a checkbox with a reactive form.\n *\n * The following example shows how to use a checkbox with a reactive form.\n *\n * ```ts\n * const rememberLoginControl = new FormControl();\n * ```\n *\n * ```\n * <input type=\"checkbox\" [formControl]=\"rememberLoginControl\">\n * ```\n *\n * @ngModule ReactiveFormsModule\n * @ngModule FormsModule\n * @publicApi\n */\nexport declare class CheckboxControlValueAccessor implements ControlValueAccessor {\n    private _renderer;\n    private _elementRef;\n    /**\n     * @description\n     * The registered callback function called when a change event occurs on the input element.\n     */\n    onChange: (_: any) => void;\n    /**\n     * @description\n     * The registered callback function called when a blur event occurs on the input element.\n     */\n    onTouched: () => void;\n    constructor(_renderer: Renderer2, _elementRef: ElementRef);\n    /**\n     * Sets the \"checked\" property on the input element.\n     *\n     * @param value The checked value\n     */\n    writeValue(value: any): void;\n    /**\n     * @description\n     * Registers a function called when the control value changes.\n     *\n     * @param fn The callback function\n     */\n    registerOnChange(fn: (_: any) => {}): void;\n    /**\n     * @description\n     * Registers a function called when the control is touched.\n     *\n     * @param fn The callback function\n     */\n    registerOnTouched(fn: () => {}): void;\n    /**\n     * Sets the \"disabled\" property on the input element.\n     *\n     * @param isDisabled The disabled value\n     */\n    setDisabledState(isDisabled: boolean): void;\n}\n"]}