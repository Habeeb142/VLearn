{"version":3,"file":"radio_control_value_accessor.d.ts","sources":["radio_control_value_accessor.d.ts"],"names":[],"mappingssourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ElementRef, Injector, OnDestroy, OnInit, Renderer2 } from '@angular/core';\nimport { ControlValueAccessor } from './control_value_accessor';\nimport { NgControl } from './ng_control';\nexport declare const RADIO_VALUE_ACCESSOR: any;\n/**\n * @description\n * Class used by Angular to track radio buttons. For internal use only.\n */\nexport declare class RadioControlRegistry {\n    private _accessors;\n    /**\n     * @description\n     * Adds a control to the internal registry. For internal use only.\n     */\n    add(control: NgControl, accessor: RadioControlValueAccessor): void;\n    /**\n     * @description\n     * Removes a control from the internal registry. For internal use only.\n     */\n    remove(accessor: RadioControlValueAccessor): void;\n    /**\n     * @description\n     * Selects a radio button. For internal use only.\n     */\n    select(accessor: RadioControlValueAccessor): void;\n    private _isSameGroup;\n}\n/**\n * @description\n * The `ControlValueAccessor` for writing radio control values and listening to radio control\n * changes. The value accessor is used by the `FormControlDirective`, `FormControlName`, and\n * `NgModel` directives.\n *\n * @usageNotes\n *\n * ### Using radio buttons with reactive form directives\n *\n * The follow example shows how to use radio buttons in a reactive form. When using radio buttons in\n * a reactive form, radio buttons in the same group should have the same `formControlName`.\n * Providing a `name` attribute is optional.\n *\n * {@example forms/ts/reactiveRadioButtons/reactive_radio_button_example.ts region='Reactive'}\n *\n * @ngModule ReactiveFormsModule\n * @ngModule FormsModule\n * @publicApi\n */\nexport declare class RadioControlValueAccessor implements ControlValueAccessor, OnDestroy, OnInit {\n    private _renderer;\n    private _elementRef;\n    private _registry;\n    private _injector;\n    /**\n     * @description\n     * The registered callback function called when a change event occurs on the input element.\n     */\n    onChange: () => void;\n    /**\n     * @description\n     * The registered callback function called when a blur event occurs on the input element.\n     */\n    onTouched: () => void;\n    /**\n     * @description\n     * Tracks the name of the radio input element.\n     */\n    name: string;\n    /**\n     * @description\n     * Tracks the name of the `FormControl` bound to the directive. The name corresponds\n     * to a key in the parent `FormGroup` or `FormArray`.\n     */\n    formControlName: string;\n    /**\n     * @description\n     * Tracks the value of the radio input element\n     */\n    value: any;\n    constructor(_renderer: Renderer2, _elementRef: ElementRef, _registry: RadioControlRegistry, _injector: Injector);\n    /**\n     * @description\n     * A lifecycle method called when the directive is initialized. For internal use only.\n     *\n     * @param changes A object of key/value pairs for the set of changed inputs.\n     */\n    ngOnInit(): void;\n    /**\n     * @description\n     * Lifecycle method called before the directive's instance is destroyed. For internal use only.\n     *\n     * @param changes A object of key/value pairs for the set of changed inputs.\n     */\n    ngOnDestroy(): void;\n    /**\n     * @description\n     * Sets the \"checked\" property value on the radio input element.\n     *\n     * @param value The checked value\n     */\n    writeValue(value: any): void;\n    /**\n     * @description\n     * Registers a function called when the control value changes.\n     *\n     * @param fn The callback function\n     */\n    registerOnChange(fn: (_: any) => {}): void;\n    /**\n     * Sets the \"value\" on the radio input element and unchecks it.\n     *\n     * @param value\n     */\n    fireUncheck(value: any): void;\n    /**\n     * @description\n     * Registers a function called when the control is touched.\n     *\n     * @param fn The callback function\n     */\n    registerOnTouched(fn: () => {}): void;\n    /**\n     * Sets the \"disabled\" property on the input element.\n     *\n     * @param isDisabled The disabled value\n     */\n    setDisabledState(isDisabled: boolean): void;\n    private _checkName;\n    private _throwNameError;\n}\n"]}