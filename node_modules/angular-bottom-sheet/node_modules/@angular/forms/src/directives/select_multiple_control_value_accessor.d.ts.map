{"version":3,"file":"select_multiple_control_value_accessor.d.ts","sources":["select_multiple_control_value_accessor.d.ts"],"names":[],"mappingssourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ElementRef, OnDestroy, Renderer2, StaticProvider } from '@angular/core';\nimport { ControlValueAccessor } from './control_value_accessor';\nexport declare const SELECT_MULTIPLE_VALUE_ACCESSOR: StaticProvider;\n/**\n * @description\n * The `ControlValueAccessor` for writing multi-select control values and listening to multi-select control\n * changes. The value accessor is used by the `FormControlDirective`, `FormControlName`, and `NgModel`\n * directives.\n *\n * @see `SelectControlValueAccessor`\n *\n * @usageNotes\n *\n * ### Using a multi-select control\n *\n * The follow example shows you how to use a multi-select control with a reactive form.\n *\n * ```ts\n * const countryControl = new FormControl();\n * ```\n *\n * ```\n * <select multiple name=\"countries\" [formControl]=\"countryControl\">\n *   <option *ngFor=\"let country of countries\" [ngValue]=\"country\">\n *     {{ country.name }}\n *   </option>\n * </select>\n * ```\n *\n * ### Customizing option selection\n *\n * To customize the default option comparison algorithm, `<select>` supports `compareWith` input.\n * See the `SelectControlValueAccessor` for usage.\n *\n * @ngModule ReactiveFormsModule\n * @ngModule FormsModule\n * @publicApi\n */\nexport declare class SelectMultipleControlValueAccessor implements ControlValueAccessor {\n    private _renderer;\n    private _elementRef;\n    /**\n     * @description\n     * The current value\n     */\n    value: any;\n    /**\n     * @description\n     * The registered callback function called when a change event occurs on the input element.\n     */\n    onChange: (_: any) => void;\n    /**\n     * @description\n     * The registered callback function called when a blur event occurs on the input element.\n     */\n    onTouched: () => void;\n    /**\n     * @description\n     * Tracks the option comparison algorithm for tracking identities when\n     * checking for changes.\n     */\n    compareWith: (o1: any, o2: any) => boolean;\n    private _compareWith;\n    constructor(_renderer: Renderer2, _elementRef: ElementRef);\n    /**\n     * @description\n     * Sets the \"value\" property on one or of more\n     * of the select's options.\n     *\n     * @param value The value\n     */\n    writeValue(value: any): void;\n    /**\n     * @description\n     * Registers a function called when the control value changes\n     * and writes an array of the selected options.\n     *\n     * @param fn The callback function\n     */\n    registerOnChange(fn: (value: any) => any): void;\n    /**\n     * @description\n     * Registers a function called when the control is touched.\n     *\n     * @param fn The callback function\n     */\n    registerOnTouched(fn: () => any): void;\n    /**\n     * Sets the \"disabled\" property on the select input element.\n     *\n     * @param isDisabled The disabled value\n     */\n    setDisabledState(isDisabled: boolean): void;\n}\n/**\n * @description\n * Marks `<option>` as dynamic, so Angular can be notified when options change.\n *\n * @see `SelectMultipleControlValueAccessor`\n *\n * @ngModule ReactiveFormsModule\n * @ngModule FormsModule\n * @publicApi\n */\nexport declare class NgSelectMultipleOption implements OnDestroy {\n    private _element;\n    private _renderer;\n    private _select;\n    id: string;\n    constructor(_element: ElementRef, _renderer: Renderer2, _select: SelectMultipleControlValueAccessor);\n    /**\n     * @description\n     * Tracks the value bound to the option element. Unlike the value binding,\n     * ngValue supports binding to objects.\n     */\n    ngValue: any;\n    /**\n     * @description\n     * Tracks simple string values bound to the option element.\n     * For objects, use the `ngValue` input binding.\n     */\n    value: any;\n    /**\n     * @description\n     * Lifecycle method called before the directive's instance is destroyed. For internal use only.\n     */\n    ngOnDestroy(): void;\n}\n"]}