'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var tslib = require('tslib');
var core$1 = require('@angular/core');
var core = require('@ionic-native/core');
require('rxjs');

var ɵngcc0 = require('@angular/core');
var SpeechRecognition = /** @class */ (function (_super) {
    tslib.__extends(SpeechRecognition, _super);
    function SpeechRecognition() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SpeechRecognition.prototype.isRecognitionAvailable = function () { return core.cordova(this, "isRecognitionAvailable", {}, arguments); };
    SpeechRecognition.prototype.startListening = function (options) { return core.cordova(this, "startListening", { "callbackOrder": "reverse", "observable": true }, arguments); };
    SpeechRecognition.prototype.stopListening = function () { return core.cordova(this, "stopListening", {}, arguments); };
    SpeechRecognition.prototype.getSupportedLanguages = function () { return core.cordova(this, "getSupportedLanguages", {}, arguments); };
    SpeechRecognition.prototype.hasPermission = function () { return core.cordova(this, "hasPermission", {}, arguments); };
    SpeechRecognition.prototype.requestPermission = function () { return core.cordova(this, "requestPermission", {}, arguments); };
    SpeechRecognition.pluginName = "SpeechRecognition";
    SpeechRecognition.plugin = "cordova-plugin-speechrecognition";
    SpeechRecognition.pluginRef = "plugins.speechRecognition";
    SpeechRecognition.repo = "https://github.com/pbakondy/cordova-plugin-speechrecognition";
    SpeechRecognition.platforms = ["Android", "iOS"];
SpeechRecognition.ɵfac = function SpeechRecognition_Factory(t) { return ɵSpeechRecognition_BaseFactory(t || SpeechRecognition); };
SpeechRecognition.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: SpeechRecognition, factory: function (t) { return SpeechRecognition.ɵfac(t); } });
var ɵSpeechRecognition_BaseFactory = /*@__PURE__*/ ɵngcc0.ɵɵgetInheritedFactory(SpeechRecognition);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(SpeechRecognition, [{
        type: core$1.Injectable
    }], null, null); })();
    return SpeechRecognition;
}(core.IonicNativePlugin));

exports.SpeechRecognition = SpeechRecognition;

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVuZGxlLmpzIiwic291cmNlcyI6WyJidW5kbGUuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7MEJBR007QUFDTjtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxudmFyIHRzbGliID0gcmVxdWlyZSgndHNsaWInKTtcbnZhciBjb3JlJDEgPSByZXF1aXJlKCdAYW5ndWxhci9jb3JlJyk7XG52YXIgY29yZSA9IHJlcXVpcmUoJ0Bpb25pYy1uYXRpdmUvY29yZScpO1xucmVxdWlyZSgncnhqcycpO1xuXG52YXIgU3BlZWNoUmVjb2duaXRpb24gPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgdHNsaWIuX19leHRlbmRzKFNwZWVjaFJlY29nbml0aW9uLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFNwZWVjaFJlY29nbml0aW9uKCkge1xuICAgICAgICByZXR1cm4gX3N1cGVyICE9PSBudWxsICYmIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gICAgfVxuICAgIFNwZWVjaFJlY29nbml0aW9uLnByb3RvdHlwZS5pc1JlY29nbml0aW9uQXZhaWxhYmxlID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gY29yZS5jb3Jkb3ZhKHRoaXMsIFwiaXNSZWNvZ25pdGlvbkF2YWlsYWJsZVwiLCB7fSwgYXJndW1lbnRzKTsgfTtcbiAgICBTcGVlY2hSZWNvZ25pdGlvbi5wcm90b3R5cGUuc3RhcnRMaXN0ZW5pbmcgPSBmdW5jdGlvbiAob3B0aW9ucykgeyByZXR1cm4gY29yZS5jb3Jkb3ZhKHRoaXMsIFwic3RhcnRMaXN0ZW5pbmdcIiwgeyBcImNhbGxiYWNrT3JkZXJcIjogXCJyZXZlcnNlXCIsIFwib2JzZXJ2YWJsZVwiOiB0cnVlIH0sIGFyZ3VtZW50cyk7IH07XG4gICAgU3BlZWNoUmVjb2duaXRpb24ucHJvdG90eXBlLnN0b3BMaXN0ZW5pbmcgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBjb3JlLmNvcmRvdmEodGhpcywgXCJzdG9wTGlzdGVuaW5nXCIsIHt9LCBhcmd1bWVudHMpOyB9O1xuICAgIFNwZWVjaFJlY29nbml0aW9uLnByb3RvdHlwZS5nZXRTdXBwb3J0ZWRMYW5ndWFnZXMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBjb3JlLmNvcmRvdmEodGhpcywgXCJnZXRTdXBwb3J0ZWRMYW5ndWFnZXNcIiwge30sIGFyZ3VtZW50cyk7IH07XG4gICAgU3BlZWNoUmVjb2duaXRpb24ucHJvdG90eXBlLmhhc1Blcm1pc3Npb24gPSBmdW5jdGlvbiAoKSB7IHJldHVybiBjb3JlLmNvcmRvdmEodGhpcywgXCJoYXNQZXJtaXNzaW9uXCIsIHt9LCBhcmd1bWVudHMpOyB9O1xuICAgIFNwZWVjaFJlY29nbml0aW9uLnByb3RvdHlwZS5yZXF1ZXN0UGVybWlzc2lvbiA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNvcmUuY29yZG92YSh0aGlzLCBcInJlcXVlc3RQZXJtaXNzaW9uXCIsIHt9LCBhcmd1bWVudHMpOyB9O1xuICAgIFNwZWVjaFJlY29nbml0aW9uLnBsdWdpbk5hbWUgPSBcIlNwZWVjaFJlY29nbml0aW9uXCI7XG4gICAgU3BlZWNoUmVjb2duaXRpb24ucGx1Z2luID0gXCJjb3Jkb3ZhLXBsdWdpbi1zcGVlY2hyZWNvZ25pdGlvblwiO1xuICAgIFNwZWVjaFJlY29nbml0aW9uLnBsdWdpblJlZiA9IFwicGx1Z2lucy5zcGVlY2hSZWNvZ25pdGlvblwiO1xuICAgIFNwZWVjaFJlY29nbml0aW9uLnJlcG8gPSBcImh0dHBzOi8vZ2l0aHViLmNvbS9wYmFrb25keS9jb3Jkb3ZhLXBsdWdpbi1zcGVlY2hyZWNvZ25pdGlvblwiO1xuICAgIFNwZWVjaFJlY29nbml0aW9uLnBsYXRmb3JtcyA9IFtcIkFuZHJvaWRcIiwgXCJpT1NcIl07XG4gICAgU3BlZWNoUmVjb2duaXRpb24uZGVjb3JhdG9ycyA9IFtcbiAgICAgICAgeyB0eXBlOiBjb3JlJDEuSW5qZWN0YWJsZSB9XG4gICAgXTtcbiAgICByZXR1cm4gU3BlZWNoUmVjb2duaXRpb247XG59KGNvcmUuSW9uaWNOYXRpdmVQbHVnaW4pKTtcblxuZXhwb3J0cy5TcGVlY2hSZWNvZ25pdGlvbiA9IFNwZWVjaFJlY29nbml0aW9uO1xuIl19