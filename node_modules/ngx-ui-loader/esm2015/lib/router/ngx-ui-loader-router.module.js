import { NgModule, Inject, Optional, SkipSelf } from '@angular/core';
import { NavigationCancel, NavigationEnd, NavigationError, NavigationStart, Router } from '@angular/router';
import { NgxUiLoaderService } from '../core/ngx-ui-loader.service';
import { NGX_UI_LOADER_ROUTER_CONFIG_TOKEN } from './ngx-ui-loader-router-config.token';
import { ROUTER_LOADER_TASK_ID } from '../utils/constants';
import { getExcludeObj, isIgnored } from '../utils/functions';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/router';
import * as ɵngcc2 from '../core/ngx-ui-loader.service';
export class NgxUiLoaderRouterModule {
    /**
     * Constructor
     */
    constructor(parentModule, customConfig, router, loader) {
        if (parentModule) {
            throw new Error('[ngx-ui-loader] - NgxUiLoaderRouterModule is already loaded. It should be imported in the root `AppModule` only!');
        }
        let config = {
            loaderId: loader.getDefaultConfig().masterLoaderId,
            showForeground: true
        };
        this.exclude = getExcludeObj(customConfig);
        if (customConfig) {
            config = Object.assign(Object.assign({}, config), customConfig);
        }
        router.events.subscribe((event) => {
            if (event instanceof NavigationStart) {
                if (!isIgnored(event.url, this.exclude.strs, this.exclude.regExps)) {
                    if (config.showForeground) {
                        loader.startLoader(config.loaderId, ROUTER_LOADER_TASK_ID);
                    }
                    else {
                        loader.startBackgroundLoader(config.loaderId, ROUTER_LOADER_TASK_ID);
                    }
                }
            }
            if (event instanceof NavigationEnd || event instanceof NavigationCancel || event instanceof NavigationError) {
                if (!isIgnored(event.url, this.exclude.strs, this.exclude.regExps)) {
                    if (config.showForeground) {
                        loader.stopLoader(config.loaderId, ROUTER_LOADER_TASK_ID);
                    }
                    else {
                        loader.stopBackgroundLoader(config.loaderId, ROUTER_LOADER_TASK_ID);
                    }
                }
            }
        });
    }
    /**
     * forRoot
     * @returns A module with its provider dependencies
     */
    static forRoot(routerConfig) {
        return {
            ngModule: NgxUiLoaderRouterModule,
            providers: [
                {
                    provide: NGX_UI_LOADER_ROUTER_CONFIG_TOKEN,
                    useValue: routerConfig
                }
            ]
        };
    }
}
NgxUiLoaderRouterModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgxUiLoaderRouterModule });
NgxUiLoaderRouterModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgxUiLoaderRouterModule_Factory(t) { return new (t || NgxUiLoaderRouterModule)(ɵngcc0.ɵɵinject(NgxUiLoaderRouterModule, 12), ɵngcc0.ɵɵinject(NGX_UI_LOADER_ROUTER_CONFIG_TOKEN, 8), ɵngcc0.ɵɵinject(ɵngcc1.Router), ɵngcc0.ɵɵinject(ɵngcc2.NgxUiLoaderService)); } });
NgxUiLoaderRouterModule.ctorParameters = () => [
    { type: NgxUiLoaderRouterModule, decorators: [{ type: Optional }, { type: SkipSelf }] },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [NGX_UI_LOADER_ROUTER_CONFIG_TOKEN,] }] },
    { type: Router },
    { type: NgxUiLoaderService }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgxUiLoaderRouterModule, [{
        type: NgModule,
        args: [{}]
    }], function () { return [{ type: NgxUiLoaderRouterModule, decorators: [{
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: undefined, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [NGX_UI_LOADER_ROUTER_CONFIG_TOKEN]
            }] }, { type: ɵngcc1.Router }, { type: ɵngcc2.NgxUiLoaderService }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LXVpLWxvYWRlci1yb3V0ZXIubW9kdWxlLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9yb2J5bnR1Y2tlci1wZWNrL3dzL25neC11aS1sb2FkZXItYmFjay9wcm9qZWN0cy9uZ3gtdWktbG9hZGVyL3NyYy9saWIvcm91dGVyL25neC11aS1sb2FkZXItcm91dGVyLm1vZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsUUFBUSxFQUF1QixNQUFNLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMxRixPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsYUFBYSxFQUFFLGVBQWUsRUFBRSxlQUFlLEVBQUUsTUFBTSxFQUFlLE1BQU0saUJBQWlCLENBQUM7QUFFekgsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sK0JBQStCLENBQUM7QUFFbkUsT0FBTyxFQUFFLGlDQUFpQyxFQUFFLE1BQU0scUNBQXFDLENBQUM7QUFDeEYsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDM0QsT0FBTyxFQUFFLGFBQWEsRUFBRSxTQUFTLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQzs7OztBQUk5RCxNQUFNLE9BQU8sdUJBQXVCO0FBQ3BDLElBa0JFO0FBQ0Y7QUFDRSxPQUFHO0FBQ0wsSUFBRSxZQUMwQixZQUFxQyxFQUNOLFlBQXFDLEVBQzVGLE1BQWMsRUFDZCxNQUEwQjtBQUMzQixRQUNDLElBQUksWUFBWSxFQUFFO0FBQ3RCLFlBQU0sTUFBTSxJQUFJLEtBQUssQ0FBQyxrSEFBa0gsQ0FBQyxDQUFDO0FBQzFJLFNBQUs7QUFDTCxRQUNJLElBQUksTUFBTSxHQUE0QjtBQUMxQyxZQUFNLFFBQVEsRUFBRSxNQUFNLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQyxjQUFjO0FBQ3hELFlBQU0sY0FBYyxFQUFFLElBQUk7QUFDMUIsU0FBSyxDQUFDO0FBQ04sUUFDSSxJQUFJLENBQUMsT0FBTyxHQUFHLGFBQWEsQ0FBQyxZQUFZLENBQUMsQ0FBQztBQUMvQyxRQUNJLElBQUksWUFBWSxFQUFFO0FBQ3RCLFlBQU0sTUFBTSxtQ0FBUSxNQUFNLEdBQUssWUFBWSxDQUFFLENBQUM7QUFDOUMsU0FBSztBQUNMLFFBQ0ksTUFBTSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQyxLQUFrQixFQUFFLEVBQUU7QUFDbkQsWUFBTSxJQUFJLEtBQUssWUFBWSxlQUFlLEVBQUU7QUFDNUMsZ0JBQVEsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEVBQUU7QUFDNUUsb0JBQVUsSUFBSSxNQUFNLENBQUMsY0FBYyxFQUFFO0FBQ3JDLHdCQUFZLE1BQU0sQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxxQkFBcUIsQ0FBQyxDQUFDO0FBQ3ZFLHFCQUFXO0FBQUMseUJBQUs7QUFDakIsd0JBQVksTUFBTSxDQUFDLHFCQUFxQixDQUFDLE1BQU0sQ0FBQyxRQUFRLEVBQUUscUJBQXFCLENBQUMsQ0FBQztBQUNqRixxQkFBVztBQUNYLGlCQUFTO0FBQ1QsYUFBTztBQUNQLFlBQ00sSUFBSSxLQUFLLFlBQVksYUFBYSxJQUFJLEtBQUssWUFBWSxnQkFBZ0IsSUFBSSxLQUFLLFlBQVksZUFBZSxFQUFFO0FBQ25ILGdCQUFRLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxFQUFFO0FBQzVFLG9CQUFVLElBQUksTUFBTSxDQUFDLGNBQWMsRUFBRTtBQUNyQyx3QkFBWSxNQUFNLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxRQUFRLEVBQUUscUJBQXFCLENBQUMsQ0FBQztBQUN0RSxxQkFBVztBQUFDLHlCQUFLO0FBQ2pCLHdCQUFZLE1BQU0sQ0FBQyxvQkFBb0IsQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLHFCQUFxQixDQUFDLENBQUM7QUFDaEYscUJBQVc7QUFDWCxpQkFBUztBQUNULGFBQU87QUFDUCxRQUFJLENBQUMsQ0FBQyxDQUFDO0FBQ1AsSUFBRSxDQUFDO0FBQ0gsSUE5REU7QUFDRjtBQUNFO0FBQ0UsT0FBQztBQUNMLElBQUUsTUFBTSxDQUFDLE9BQU8sQ0FBQyxZQUFxQztBQUFJLFFBQ3RELE9BQU87QUFDWCxZQUFNLFFBQVEsRUFBRSx1QkFBdUI7QUFDdkMsWUFBTSxTQUFTLEVBQUU7QUFDakIsZ0JBQVE7QUFDUixvQkFBVSxPQUFPLEVBQUUsaUNBQWlDO0FBQ3BELG9CQUFVLFFBQVEsRUFBRSxZQUFZO0FBQ2hDLGlCQUFTO0FBQ1QsYUFBTztBQUNQLFNBQUssQ0FBQztBQUNOLElBQUUsQ0FBQztBQUNIO21EQW5CQyxRQUFRLFNBQUMsRUFBRTtpVkFDUDtBQUFDO0FBQ1UsWUFzQjBCLHVCQUF1Qix1QkFBNUQsUUFBUSxZQUFJLFFBQVE7QUFBTyw0Q0FDM0IsUUFBUSxZQUFJLE1BQU0sU0FBQyxpQ0FBaUM7QUFBUyxZQWxDVSxNQUFNO0FBQUksWUFFN0Usa0JBQWtCO0FBQUc7Ozs7Ozs7Ozs7Ozs7Z0dBQUU7QUFBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5nTW9kdWxlLCBNb2R1bGVXaXRoUHJvdmlkZXJzLCBJbmplY3QsIE9wdGlvbmFsLCBTa2lwU2VsZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTmF2aWdhdGlvbkNhbmNlbCwgTmF2aWdhdGlvbkVuZCwgTmF2aWdhdGlvbkVycm9yLCBOYXZpZ2F0aW9uU3RhcnQsIFJvdXRlciwgUm91dGVyRXZlbnQgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xuXG5pbXBvcnQgeyBOZ3hVaUxvYWRlclNlcnZpY2UgfSBmcm9tICcuLi9jb3JlL25neC11aS1sb2FkZXIuc2VydmljZSc7XG5pbXBvcnQgeyBOZ3hVaUxvYWRlclJvdXRlckNvbmZpZyB9IGZyb20gJy4uL3V0aWxzL2ludGVyZmFjZXMnO1xuaW1wb3J0IHsgTkdYX1VJX0xPQURFUl9ST1VURVJfQ09ORklHX1RPS0VOIH0gZnJvbSAnLi9uZ3gtdWktbG9hZGVyLXJvdXRlci1jb25maWcudG9rZW4nO1xuaW1wb3J0IHsgUk9VVEVSX0xPQURFUl9UQVNLX0lEIH0gZnJvbSAnLi4vdXRpbHMvY29uc3RhbnRzJztcbmltcG9ydCB7IGdldEV4Y2x1ZGVPYmosIGlzSWdub3JlZCB9IGZyb20gJy4uL3V0aWxzL2Z1bmN0aW9ucyc7XG5pbXBvcnQgeyBFeGNsdWRlIH0gZnJvbSAnLi4vdXRpbHMvaW50ZXJmYWNlcyc7XG5cbkBOZ01vZHVsZSh7fSlcbmV4cG9ydCBjbGFzcyBOZ3hVaUxvYWRlclJvdXRlck1vZHVsZSB7XG4gIHByaXZhdGUgZXhjbHVkZTogRXhjbHVkZTtcblxuICAvKipcbiAgICogZm9yUm9vdFxuICAgKiBAcmV0dXJucyBBIG1vZHVsZSB3aXRoIGl0cyBwcm92aWRlciBkZXBlbmRlbmNpZXNcbiAgICovXG4gIHN0YXRpYyBmb3JSb290KHJvdXRlckNvbmZpZzogTmd4VWlMb2FkZXJSb3V0ZXJDb25maWcpOiBNb2R1bGVXaXRoUHJvdmlkZXJzPE5neFVpTG9hZGVyUm91dGVyTW9kdWxlPiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5nTW9kdWxlOiBOZ3hVaUxvYWRlclJvdXRlck1vZHVsZSxcbiAgICAgIHByb3ZpZGVyczogW1xuICAgICAgICB7XG4gICAgICAgICAgcHJvdmlkZTogTkdYX1VJX0xPQURFUl9ST1VURVJfQ09ORklHX1RPS0VOLFxuICAgICAgICAgIHVzZVZhbHVlOiByb3V0ZXJDb25maWdcbiAgICAgICAgfVxuICAgICAgXVxuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogQ29uc3RydWN0b3JcbiAgICovXG4gIGNvbnN0cnVjdG9yKFxuICAgIEBPcHRpb25hbCgpIEBTa2lwU2VsZigpIHBhcmVudE1vZHVsZTogTmd4VWlMb2FkZXJSb3V0ZXJNb2R1bGUsXG4gICAgQE9wdGlvbmFsKCkgQEluamVjdChOR1hfVUlfTE9BREVSX1JPVVRFUl9DT05GSUdfVE9LRU4pIGN1c3RvbUNvbmZpZzogTmd4VWlMb2FkZXJSb3V0ZXJDb25maWcsXG4gICAgcm91dGVyOiBSb3V0ZXIsXG4gICAgbG9hZGVyOiBOZ3hVaUxvYWRlclNlcnZpY2VcbiAgKSB7XG4gICAgaWYgKHBhcmVudE1vZHVsZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdbbmd4LXVpLWxvYWRlcl0gLSBOZ3hVaUxvYWRlclJvdXRlck1vZHVsZSBpcyBhbHJlYWR5IGxvYWRlZC4gSXQgc2hvdWxkIGJlIGltcG9ydGVkIGluIHRoZSByb290IGBBcHBNb2R1bGVgIG9ubHkhJyk7XG4gICAgfVxuXG4gICAgbGV0IGNvbmZpZzogTmd4VWlMb2FkZXJSb3V0ZXJDb25maWcgPSB7XG4gICAgICBsb2FkZXJJZDogbG9hZGVyLmdldERlZmF1bHRDb25maWcoKS5tYXN0ZXJMb2FkZXJJZCxcbiAgICAgIHNob3dGb3JlZ3JvdW5kOiB0cnVlXG4gICAgfTtcblxuICAgIHRoaXMuZXhjbHVkZSA9IGdldEV4Y2x1ZGVPYmooY3VzdG9tQ29uZmlnKTtcblxuICAgIGlmIChjdXN0b21Db25maWcpIHtcbiAgICAgIGNvbmZpZyA9IHsgLi4uY29uZmlnLCAuLi5jdXN0b21Db25maWcgfTtcbiAgICB9XG5cbiAgICByb3V0ZXIuZXZlbnRzLnN1YnNjcmliZSgoZXZlbnQ6IFJvdXRlckV2ZW50KSA9PiB7XG4gICAgICBpZiAoZXZlbnQgaW5zdGFuY2VvZiBOYXZpZ2F0aW9uU3RhcnQpIHtcbiAgICAgICAgaWYgKCFpc0lnbm9yZWQoZXZlbnQudXJsLCB0aGlzLmV4Y2x1ZGUuc3RycywgdGhpcy5leGNsdWRlLnJlZ0V4cHMpKSB7XG4gICAgICAgICAgaWYgKGNvbmZpZy5zaG93Rm9yZWdyb3VuZCkge1xuICAgICAgICAgICAgbG9hZGVyLnN0YXJ0TG9hZGVyKGNvbmZpZy5sb2FkZXJJZCwgUk9VVEVSX0xPQURFUl9UQVNLX0lEKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbG9hZGVyLnN0YXJ0QmFja2dyb3VuZExvYWRlcihjb25maWcubG9hZGVySWQsIFJPVVRFUl9MT0FERVJfVEFTS19JRCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChldmVudCBpbnN0YW5jZW9mIE5hdmlnYXRpb25FbmQgfHwgZXZlbnQgaW5zdGFuY2VvZiBOYXZpZ2F0aW9uQ2FuY2VsIHx8IGV2ZW50IGluc3RhbmNlb2YgTmF2aWdhdGlvbkVycm9yKSB7XG4gICAgICAgIGlmICghaXNJZ25vcmVkKGV2ZW50LnVybCwgdGhpcy5leGNsdWRlLnN0cnMsIHRoaXMuZXhjbHVkZS5yZWdFeHBzKSkge1xuICAgICAgICAgIGlmIChjb25maWcuc2hvd0ZvcmVncm91bmQpIHtcbiAgICAgICAgICAgIGxvYWRlci5zdG9wTG9hZGVyKGNvbmZpZy5sb2FkZXJJZCwgUk9VVEVSX0xPQURFUl9UQVNLX0lEKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbG9hZGVyLnN0b3BCYWNrZ3JvdW5kTG9hZGVyKGNvbmZpZy5sb2FkZXJJZCwgUk9VVEVSX0xPQURFUl9UQVNLX0lEKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufVxuIl19